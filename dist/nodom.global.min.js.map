{"version":3,"file":"nodom.global.min.js","sources":["../core/defineelementmanager.ts","../core/directivetype.ts","../core/directivemanager.ts","../node_modules/_tslib@2.1.0@tslib/tslib.es6.js","../core/locales/msg_en.ts","../core/locales/msg_zh.ts","../core/modulefactory.ts","../core/expression.ts","../core/cssmanager.ts","../core/renderer.ts","../core/requestmanager.ts","../core/route.ts","../core/scheduler.ts","../core/nodom.ts","../core/error.ts","../core/util.ts","../core/directive.ts","../core/event.ts","../core/virtualdom.ts","../core/compiler.ts","../core/difftool.ts","../core/defineelement.ts","../core/eventmanager.ts","../core/eventfactory.ts","../core/cache.ts","../core/globalcache.ts","../core/model.ts","../core/modelmanager.ts","../core/objectmanager.ts","../core/types.ts","../core/dommanager.ts","../extend/elementinit.ts","../extend/directiveinit.ts","../extend/eventinit.ts","../core/module.ts","../core/factory.ts","../core/router.ts"],"sourcesContent":["import { DefineElement } from \"./defineelement\";\n\n/**\n * 自定义元素管理器\n */\nexport class DefineElementManager {\n    /**\n     * 自定义element\n     */\n    private static elements: Map<string, DefineElement> = new Map();\n    /**\n     * 添加自定义元素类\n     * @param clazz     自定义元素类或类数组\n     * @param alias     别名   \n     */\n    public static add(clazz:any,alias?:string) {\n        if(Array.isArray(clazz)){\n            for(let c of clazz){\n                this.elements.set(c.name.toUpperCase(), c);\n            }\n        }else{\n            this.elements.set((alias||clazz.name).toUpperCase(), clazz);\n        }\n    }\n\n    /**\n     * 获取自定义元素类\n     * @param tagName   元素名\n     * @returns         自定义元素类\n     */\n    public static get(tagName: string): any {\n        return this.elements.get(tagName.toUpperCase());\n    }\n\n    /**\n     * 是否存在自定义元素\n     * @param tagName   元素名\n     * @returns         存在或不存在\n     */\n    public static has(tagName:string):boolean{\n        return this.elements.has(tagName.toUpperCase());\n    }\n}\n","/**\n * 指令类\n */\nexport  class DirectiveType {\n    /**\n     * 指令类型名\n     */\n    public name:string;\n    \n    /**\n     * 优先级，越小优先级越高\n     */\n    public prio:number;\n\n    /**\n     * 渲染时执行方法\n     */\n    public handle:Function;\n    \n    /**\n     * 构造方法\n     * @param name      指令类型名       \n     * @param handle    渲染时执行方法\n     * @param prio      类型优先级\n     */ \n    constructor(name:string,handle:Function, prio?:number) {\n        this.name = name;\n        this.prio = prio>=0?prio:10;\n        this.handle = handle;\n    }\n}\n","import { DirectiveType } from \"./directivetype\";\n/**\n * 指令管理器\n */\nexport  class DirectiveManager {\n    /**\n     * 指令映射\n     */\n    private static directiveTypes:Map<string,DirectiveType> = new Map();\n    \n    /**\n     * 增加指令映射\n     * @param name      指令类型名\n     * @param handle    渲染处理函数\n     * @param prio      类型优先级\n     */\n    public static addType(name:string,handle:Function,prio?:number) {\n        this.directiveTypes.set(name, new DirectiveType(name,handle,prio));\n    }\n\n    /**\n     * 移除指令映射\n     * @param name  指令类型名\n     */\n    public static removeType(name:string) {\n        this.directiveTypes.delete(name);\n    }\n\n    /**\n     * 获取指令\n     * @param name  指令类型名\n     * @returns     指令类型或undefined\n     */\n    public static getType(name:string) {\n        return this.directiveTypes.get(name);\n    }\n\n    /**\n     * 是否含有某个指令\n     * @param name  指令类型名\n     * @returns     true/false\n     */\n    public static hasType(name:string) {\n        return this.directiveTypes.has(name);\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * 消息js文件 中文文件\n */\nexport const NodomMessage_en = {\n    /**\n     * tip words\n     */\n    TipWords:{\n        application:\"Application\",\n        system:\"System\",\n        module:\"Module\",\n        clazz:\"类\",\n        moduleClass:'ModuleClass',\n        model:\"Model\",\n        directive:\"Directive\",\n        directiveType:\"Directive-type\",\n        expression:\"Expression\",\n        event:\"Event\",\n        method:\"Method\",\n        filter:\"Filter\",\n        filterType:\"Filter-type\",\n        data:\"Data\",\n        dataItem:'Data-item',\n        route:'Route',\n        routeView:'Route-container',\n        plugin:'Plugin',\n        resource:'Resource',\n        root:'Root',\n        element:'VirtualDom'\n    },\n    /**\n     * error info\n     */\n    ErrorMsgs:{\n        unknown:\"unknown error\",\n        uninit:\"{0}未初始化\",\n        paramException:\"{0} '{1}' parameter error，see api\",\n        invoke:\"method {0} parameter {1} must be {2}\",\n        invoke1:\"method {0} parameter {1} must be {2} or {3}\",\n        invoke2:\"method {0} parameter {1} or {2} must be {3}\",\n        invoke3:\"method {0} parameter {1} not allowed empty\",\n        exist:\"{0} is already exist\",\n        exist1:\"{0} '{1}' is already exist\",\n        notexist:\"{0} is not exist\",\n        notexist1:\"{0} '{1}' is not exist\",\n        notupd:\"{0} not allow to change\",\n        notremove:\"{0} not allow to delete\",\n        notremove1:\"{0} {1} not allow to delete\",\n        namedinvalid:\"{0} {1} name error，see name rules\",\n        initial:\"{0} init parameter error\",\n        jsonparse:\"JSON parse error\",\n        timeout:\"request overtime\",\n        config:\"{0} config parameter error\",\n        config1:\"{0} config parameter '{1}' error\",\n        itemnotempty:\"{0} '{1}' config item '{2}' not allow empty\",\n\t\titemincorrect:\"{0} '{1}' config item '{2}' error\",\n        needEndTag: \"element {0} is not closed\",\n        needStartTag: \"without start tag matchs {0}\",\n        tagError:\"element {0} error\",\n        wrongTemplate:\"wrong template\",\n        wrongExpression:\"expression error: {0} \"\n    },\n\n    WeekDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n}\n","/*\n * 消息js文件 中文文件\n */\nexport const NodomMessage_zh = {\n    /**\n     * 提示单词\n     */\n    TipWords: {\n        application: \"应用\",\n        system: \"系统\",\n        module: \"模块\",\n        clazz:\"类\",\n        moduleClass: '模块类',\n        model: \"模型\",\n        directive: \"指令\",\n        directiveType: \"指令类型\",\n        expression: \"表达式\",\n        event: \"事件\",\n        method: \"方法\",\n        filter: \"过滤器\",\n        filterType: \"过滤器类型\",\n        data: \"数据\",\n        dataItem: '数据项',\n        route: '路由',\n        routeView: '路由容器',\n        plugin: '插件',\n        resource: '资源',\n        root: '根',\n        element: '元素'\n    },\n    /**\n     * 异常信息\n     */\n    ErrorMsgs: {\n        unknown: \"未知错误\",\n        uninit:\"{0}未初始化\",\n        paramException: \"{0}'{1}'方法参数错误，请参考api\",\n        invoke: \"{0} 方法参数 {1} 必须为 {2}\",\n        invoke1: \"{0} 方法参数 {1} 必须为 {2} 或 {3}\",\n        invoke2: \"{0} 方法参数 {1} 或 {2} 必须为 {3}\",\n        invoke3: \"{0} 方法参数 {1} 不能为空\",\n        exist: \"{0} 已存在\",\n        exist1: \"{0} '{1}' 已存在\",\n        notexist: \"{0} 不存在\",\n        notexist1: \"{0} '{1}' 不存在\",\n        notupd: \"{0} 不可修改\",\n        notremove: \"{0} 不可删除\",\n        notremove1: \"{0} {1} 不可删除\",\n        namedinvalid: \"{0} {1} 命名错误，请参考用户手册对应命名规范\",\n        initial: \"{0} 初始化参数错误\",\n        jsonparse: \"JSON解析错误\",\n        timeout: \"请求超时\",\n        config: \"{0} 配置参数错误\",\n        config1: \"{0} 配置参数 '{1}' 错误\",\n        itemnotempty: \"{0} '{1}' 配置项 '{2}' 不能为空\",\n        itemincorrect: \"{0} '{1}' 配置项 '{2}' 错误\",\n        needEndTag: \"{0} 标签未闭合\",\n        needStartTag: \"未找到与 {0} 匹配的开始标签\",\n        tagError:\"标签 {0} 错误\",\n        wrongTemplate:\"模版格式错误\",\n        wrongExpression:\"表达式 {0} 错误\"\n    },\n    WeekDays: [\"星期日\",\"星期一\", \"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"]\n}\n","import { Module } from \"./module\";\n\n/**\n * 过滤器工厂，存储模块过滤器\n */\nexport class ModuleFactory {\n    /**\n     * 模块对象集合 {moduleId:模块对象}}\n     */\n    private static modules: Map<number, Module> = new Map();\n\n    /**\n     * 模块类集合 {className:模块类}\n     */\n    public static classes: Map<string, Module> = new Map();\n\n    /**\n     * 别名map\n     * key:     别名\n     * value:   类名\n     */\n    public static aliasMap:Map<string,string> = new Map();\n\n    /**\n     * 主模块\n     */\n    private static mainModule: Module;\n    /**\n     * 添加模块到工厂\n     * @param item  模块对象\n     */\n    public static add(item: Module) {\n        // 第一个为主模块\n        if (this.modules.size === 0) {\n            this.mainModule = item;\n        }\n        this.modules.set(item.id, item);\n        //添加模块类\n        this.addClass(item.constructor);\n    }\n\n    /**\n     * 获得模块\n     * @param name  类或实例id\n     */\n    public static get(name: any): Module {\n        let tp = typeof name;\n        let mdl:Module;\n        if (tp === 'number') {  //数字，模块id\n            return this.modules.get(name);\n        } else{\n            let m;\n            if(tp === 'string'){ //字符串，模块类名\n                name = name.toLowerCase();\n                if(!this.classes.has(name)){  //为别名\n                    name = this.aliasMap.get(name);\n                }\n                if(this.classes.has(name)){\n                    mdl = Reflect.construct(<any>this.classes.get(name),[]);\n                }\n            } else{ //模块类\n                mdl = Reflect.construct(name,[]);\n            }\n            if(mdl){\n                mdl.init();\n                return mdl;\n            }\n        } \n    }\n\n    /**\n     * 是否存在模块类\n     * @param clazzName     模块类名\n     * @returns     true/false\n     */\n    public static hasClass(clazzName: string): boolean {\n        const name = clazzName.toLowerCase();\n        return this.classes.has(name) || this.aliasMap.has(name);\n    }\n\n    /**\n     * 添加模块类\n     * @param clazz     模块类\n     * @param alias     注册别名\n     */\n    public static addClass(clazz: any, alias?: string) {\n        //转换成小写\n        let name = clazz.name.toLowerCase();\n        if (this.classes.has(name)) {\n            return;\n        }\n        this.classes.set(name, clazz);\n        //添加别名\n        if (alias) {\n            this.aliasMap.set(alias.toLowerCase(),name);\n        }\n    }\n\n    /**\n     * 获取模块类\n     * @param name  类名或别名 \n     * @returns     模块类\n     */\n    public static getClass(name:string):any{\n        name = name.toLowerCase();\n        return this.classes.has(name)?this.classes.get(name):this.classes.get(this.aliasMap.get(name));\n    }\n    \n    /**\n     * 装载module\n     * @param modulePath    模块类路径\n     * @return              模块类\n     */\n    public static async load(modulePath:string):Promise<any>{\n        let m = await import(modulePath);\n        if(m){\n            //通过import的模块，查找模块类\n            for(let k of Object.keys(m)){\n                if(m[k].name){\n                    this.addClass(m[k]);\n                    return m[k];\n                }\n            }\n        }\n    }\n    /**\n     * 从工厂移除模块\n     * @param id    模块id\n     */\n    static remove(id: number) {\n        this.modules.delete(id);\n    }\n    /**\n     * 设置主模块\n     * @param m \t模块 \n     */\n    static setMain(m: Module) {\n        this.mainModule = m;\n    }\n\n    /**\n     * 获取主模块\n     * @returns \t应用的主模块\n     */\n    static getMain() {\n        return this.mainModule;\n    }\n}\n","import { NError } from \"./error\";\nimport { Model } from \"./model\";\nimport { Module } from \"./module\";\nimport { Util } from \"./util\";\n\n/**\n * 表达式类\n * 表达式中的特殊符号\n *  this:指向渲染的module\n *  $model:指向当前dom的model\n */\nexport class Expression {\n    /**\n      * 表达式id\n      */\n    id: number;\n\n    /**\n     * 执行函数\n     */\n    execFunc: Function;\n\n    /**\n     * 源表达式串\n     */\n    exprStr: string;\n\n    /**\n     * 值\n     */\n    value:any;\n\n    /**\n     * @param exprStr\t表达式串\n     */\n    constructor(exprStr: string) {\n        this.id = Util.genId();\n        if (!exprStr || (exprStr=exprStr.trim())==='') {\n            return;\n        }\n        this.exprStr = exprStr;\n        const funStr = this.compile(exprStr);\n        this.execFunc = new Function('$model','return ' + funStr);\n    }\n\n    /**\n     * 编译表达式串，替换字段和方法\n     * @param exprStr   表达式串\n     * @returns         编译后的表达式串\n     */\n    private compile(exprStr:string){\n        //字符串，object key，有效命名(函数或字段)\n        const reg = /('[\\s\\S]*?')|(\"[\\s\\S]*?\")|(`[\\s\\S]*?`)|([a-zA-Z$_][\\w$]*\\s*?:)|((\\.{3}|\\.)?[a-zA-Z$_][\\w$]*(\\.[a-zA-Z$_][\\w$]*)*(\\s*[\\[\\(](\\s*\\))?)?)/g;\n        let r;\n        let retS = '';\n        let index = 0;  //当前位置\n\n        while((r=reg.exec(exprStr)) !== null){\n            let s = r[0];\n            if(index < r.index){\n                retS += exprStr.substring(index,r.index);\n            }\n            if(s[0] === \"'\" || s[0] === '\"' || s[0] === '`'){ //字符串\n                retS += s;\n            }else{\n                let lch = s[s.length-1];\n                if(lch === ':'){  //object key\n                    retS += s;\n                }else if(lch === '(' || lch === ')'){ //函数，非内部函数\n                    retS += handleFunc(s);\n                }else { //字段 this $model .field等不做处理\n                    if(s.startsWith('this.') \n                        || Util.isKeyWord(s) \n                        || (s[0] === '.' && s[1]!=='.')\n                        || s==='$model'\n                        ){ //非model属性\n                        retS += s; \n                    }else{  //model属性\n                        let s1 = '';\n                        if(s.startsWith('...')){ // ...属性名\n                            s1 = '...';\n                            s = s.substring(3);\n                        }\n                        retS += s1 +'$model.' + s;\n                    }\n                }\n            } \n            index = reg.lastIndex;\n        }\n        if(index < exprStr.length){\n            retS += exprStr.substring(index);\n        }\n        return retS;\n\n        /**\n         * 处理函数串\n         * @param str   源串\n         * @returns     处理后的串\n         */\n        function handleFunc(str):string{\n            //去除空格\n            str = str.replace(/\\s+/g,'');\n            const ind1 = str.lastIndexOf('(');\n            const ind2 = str.indexOf('.');\n            //第一段\n            const fn1 = (ind2 !== -1?str.substring(0,ind2):str.substring(0,ind1));\n            //保留字或第一个为.\n            if(Util.isKeyWord(fn1) || str[0] === '.'){\n                return str;\n            }\n            if(ind2 === -1){\n                let s = \"this.invokeMethod('\" + fn1 + \"'\";\n                s += str[str.length-1] !== ')'?',':')';\n                return s;\n            }\n            return '$model.' + str;\n        }\n    }\n\n    /**\n     * 表达式计算\n     * @param module    模块\n     * @param model \t模型\n     * @returns \t\t计算结果\n     */\n    public val(module:Module,model: Model) {\n        if(!this.execFunc){\n            return;\n        }\n        let v;\n        try {\n            v = this.execFunc.call(module,model);\n        } catch (e) {\n            console.error(new NError(\"wrongExpression\",this.exprStr).message);\n            console.error(e);\n        }\n        this.value = v;\n        return v;\n    }\n}","import {Module} from \"./module\";\nimport { IRenderedDom } from \"./types\";\n/**\n * css 管理器\n * 针对不同的rule，处理方式不同\n * CssStyleRule 进行保存和替换，同时 scopeInModule(模块作用域)有效\n * CssImportRule 路径不重复添加，因为必须加在stylerule前面，所以需要记录最后的import索引号\n */\nexport class CssManager{\n\n    /**\n     * style sheet\n     */\n    private static sheet:any;\n\n    /**\n     * import url map，用于存储import的url路径\n     */\n    private static importMap = new Map();\n\n    /**\n     * importrule 位置\n     */\n    private static importIndex = 0;\n\n    /**\n     * css class 前置名\n     */\n    private static cssPreName = '___nodommodule___';\n    \n    /**\n     * 处理style 元素\n     * @param module    模块\n     * @param dom       虚拟dom\n     * @param root      模块root dom\n     * @param add       是否添加根模块类名\n     * @returns         如果是styledom，则返回true，否则返回false\n     */\n    public static handleStyleDom(module:Module,dom:IRenderedDom,root:IRenderedDom):void{\n        if(dom.props['scope'] === 'this'){\n            let cls = this.cssPreName + module.id;\n            if(root.props['class']){\n                root.props['class'] = dom.props['class'] + ' ' + cls;\n            }else{\n                root.props['class'] = cls;\n            }\n        }\n    }\n\n    /**\n     * 处理 style 下的文本元素\n     * @param module    模块\n     * @param dom       style text element\n     * @returns         如果是styleTextdom返回true，否则返回false\n     */\n    public static handleStyleTextDom(module:Module,dom:IRenderedDom):boolean{\n        if(!dom.parent || dom.parent.tagName !== 'style'){\n            return false;\n        }\n        //scope=this，在模块根节点添加 限定 class\n        CssManager.addRules(module,dom.textContent,dom.parent&&dom.parent.props['scope'] === 'this'?'.' + this.cssPreName + module.id:undefined);\n        return true;\n    }\n\n    /**\n     * 添加多个css rule\n     * @param cssText           rule集合 \n     * @param module            模块\n     * @param scopeName         作用域名(前置选择器)\n     */\n    public static addRules(module:Module,cssText:string,scopeName?:string){\n        //sheet 初始化\n        if(!this.sheet){\n            //safari不支持 cssstylesheet constructor，用 style代替\n            let sheet = document.createElement('style');\n            document.head.appendChild(sheet);\n            this.sheet = document.styleSheets[0];\n        }\n\n        //如果有作用域，则清除作用域下的rule\n        if(scopeName){\n            this.clearModuleRules(module);\n        }\n\n        //是否限定在模块内\n        //cssRule 获取正则式  @import\n        const reg = /(@[a-zA-Z]+\\s+url\\(.+?\\))|([.#@a-zA-Z]\\S*(\\s*\\S*\\s*?)?{)|\\}/g;\n\n        //import support url正则式\n        const regImp = /@[a-zA-Z]+\\s+url/;\n        \n        // keyframe font page support... 开始 位置\n        let startIndex:number=-1;\n        // { 个数，遇到 } -1 \n        let beginNum:number = 0;\n        let re;\n        while((re=reg.exec(cssText)) !== null){\n            if(regImp.test(re[0])){ //import namespace\n                handleImport(re[0]);\n            }else if(re[0] === '}'){ //回收括号，单个样式结束判断\n                if(startIndex>=0 && --beginNum <= 0){  //style @ end\n                    let txt = cssText.substring(startIndex,re.index+1);\n                    if(txt[0] === '@'){ //@开头\n                        this.sheet.insertRule(txt,CssManager.sheet.cssRules?CssManager.sheet.cssRules.length:0);\n                    }else{  //style\n                        handleStyle(module,txt,scopeName);\n                    }\n                    startIndex = -1;\n                    beginNum = 0;\n                }\n            }else{ //style 或 @内部\n                if(startIndex === -1){\n                    startIndex = re.index;\n                    beginNum++;\n                }else{\n                    beginNum++;\n                }\n            }\n        }\n        \n        /**\n         * 处理style rule\n         * @param module         模块\n         * @param cssText        css 文本\n         * @param scopeName      作用域名(前置选择器)\n         * @returns              如果css文本最后一个\"{\"前没有字符串，则返回void   \n         */\n        function handleStyle(module:Module,cssText:string,scopeName?:string){\n            const reg = /.+(?=\\{)/; //匹配字符\"{\"前出现的所有字符\n            let r = reg.exec(cssText);\n            if(!r){\n                return;\n            }\n            // 保存样式名，在模块 object manager 中以数组存储\n            if(scopeName){\n                let arr = module.objectManager.get('$cssRules');\n                if(!arr){\n                    arr = [];\n                    module.objectManager.set('$cssRules',arr);\n                }\n                arr.push((scopeName + ' ' + r[0]));\n                //为样式添加 scope name\n                cssText = scopeName + ' ' + cssText;\n            }\n            //加入到样式表\n            CssManager.sheet.insertRule(cssText,CssManager.sheet.cssRules?CssManager.sheet.cssRules.length:0);\n        } \n\n        /**\n         * 处理import rule\n         * @param cssText   css文本\n         * @returns         如果cssText中\"()\"内有字符串且importMap中存在键值为\"()\"内字符串的第一个字符，则返回void\n         */\n        function handleImport(cssText:string){\n            let ind = cssText.indexOf('(');\n            let ind1 = cssText.lastIndexOf(')');\n            if(ind === -1 || ind1 === -1 || ind>=ind1){\n                return;\n            }\n            let css = cssText.substring(ind,ind1);\n            if(CssManager.importMap.has(css)){\n                return;\n            }\n            //插入import rule\n            CssManager.sheet.insertRule(cssText,CssManager.importIndex++);\n            CssManager.importMap.set(css,true);\n        }\n        \n    }\n\n    /**\n     * 清除模块css rules\n     * @param module  模块\n     * @returns       如果模块不存在css rules，则返回void \n     */\n    public static clearModuleRules(module:Module){\n        let rules = module.objectManager.get('$cssRules');\n        if(!rules || rules.length === 0){\n            return;\n        }\n        //从sheet清除\n        for(let i=0;i<this.sheet.cssRules.length;i++){\n            let r = this.sheet.cssRules[i];\n            if(r.selectorText && rules.indexOf(r.selectorText) !== -1){\n                this.sheet.deleteRule(i--);\n            }\n        }\n\n        //置空cache\n        module.objectManager.set('$cssRules',[]);\n    }\n}","import { Module } from \"./module\";\nimport { ModuleFactory } from \"./modulefactory\";\nimport { VirtualDom } from \"./virtualdom\";\nimport { Model } from \"./model\";\nimport { Expression } from \"./expression\";\nimport { CssManager } from \"./cssmanager\";\nimport { IRenderedDom } from \"./types\";\n\n/**\n * 渲染器\n */\nexport class Renderer {\n    /**\n     * 根rootEl\n     */\n    private static rootEl:HTMLElement;\n\n    /**\n     * 等待渲染列表（模块名）\n     */\n    private static waitList: Array < number > = [];\n\n    /**\n     * 当前module\n     */\n    private static currentModule:Module;\n\n    /**\n     * 当前模块根dom\n     */\n    private static currentRootDom:IRenderedDom;\n\n    /**\n     * 设置根\n     * @param rootEl \n     */\n    public static setRootEl(rootEl){\n        this.rootEl = rootEl;\n    }\n\n    /**\n     * 获取根element\n     * @returns 根element\n     */\n    public static getRootEl():HTMLElement{\n        return this.rootEl;\n    }\n\n    /**\n     * 获取当前渲染模块\n     * @returns     当前渲染模块\n     */\n    public static getCurrentModule():Module{\n        return this.currentModule;\n    }\n\n    /**\n     * 添加到渲染列表\n     * @param module 模块\n     */\n    public static add(module:Module) {\n        //如果已经在列表中，不再添加\n        if (!this.waitList.includes(module.id)) {\n            //计算优先级\n            this.waitList.push(module.id);\n        }\n    }\n    \n    /**\n     * 从渲染队列移除\n     * @param moduleId \n     */\n    public static remove(moduleId:number){\n        let index;\n        if((index = this.waitList.indexOf(moduleId)) !== -1){\n            //不能破坏watiList顺序，用null替换\n            this.waitList.splice(index,1,null);\n        }\n    }\n    /**\n     * 队列渲染\n     */\n    public static render() {\n        for(;this.waitList.length>0;){\n            let id = this.waitList[0];\n            if(id){ //存在id为null情况，remove方法造成\n                const m = ModuleFactory.get(id);\n                this.currentModule = m;\n                m.render();\n                this.currentModule = null;\n            }\n            //渲染后移除\n            this.waitList.shift();\n        }\n    }\n\n    /**\n     * 渲染dom\n     * @param module            模块 \n     * @param src               源dom\n     * @param model             模型，如果src已经带有model，则此参数无效，一般为指令产生的model（如slot）\n     * @param parent            父dom\n     * @param key               key 附加key，放在domkey的后面\n     * @returns \n     */\n    public static renderDom(module:Module,src:VirtualDom,model:Model,parent?:IRenderedDom,key?:any):IRenderedDom{\n        //构建key，如果带key，则需要重新构建唯一key\n        const key1 = key?src.key + '_' + key:src.key;\n        \n        //静态节点只渲染1次\n        if(src.staticNum>0){\n            src.staticNum--;\n        }\n\n        //初始化渲染节点\n        let dst:IRenderedDom = {\n            key:key1,\n            model:model,\n            vdom:src,\n            staticNum:src.staticNum\n        }\n\n        if(src.tagName){ //标签\n            dst.tagName = src.tagName;\n            //添加key属性\n            dst.props = {};\n            //设置svg标志\n            if(src.isSvg){\n                dst.isSvg = src.isSvg\n            }\n        }\n        //设置当前根root\n        if(!parent){\n            this.currentRootDom = dst;\n        }else{\n            // 设置父对象\n            dst.parent = parent;\n        }\n        \n        //处理model指令\n        const mdlDir = src.getDirective('model');\n        if(mdlDir){\n            mdlDir.exec(module,dst);\n        }\n        \n        if(dst.tagName){  //标签节点\n            this.handleProps(module,src,dst);\n            //处理style标签，如果为style，则不处理assets\n            if(src.tagName === 'style'){\n                CssManager.handleStyleDom(module,dst,Renderer.currentRootDom);\n            }else if(src.assets && src.assets.size>0){\n                dst.assets ||= {};\n                for(let p of src.assets){\n                    dst.assets[p[0]] = p[1];\n                }\n            }\n            //处理directive时，导致禁止后续渲染，则不再渲染，如show指令\n            if(!this.handleDirectives(module,src,dst)){\n                return null;\n            }\n            //非module dom，添加dst事件到事件工厂\n            if(src.events && !src.hasDirective('module')){\n                module.eventFactory.removeAllEvents(dst);\n                for(let evt of src.events){\n                    //当事件串为表达式时，需要处理\n                    this.currentModule.eventFactory.addEvent(dst,evt.handleExpr(module,model));\n                }\n            }\n            //子节点渲染\n            if(src.children && src.children.length>0){\n                dst.children = [];\n                for(let c of src.children){\n                    this.renderDom(module,c,dst.model,dst,key?key:null);\n                }\n            }\n        }else{ //文本节点\n            if(src.expressions){ //文本节点\n                let value = '';\n                for(let expr of src.expressions){\n                    if (expr instanceof Expression) { //处理表达式\n                        let v1 = expr.val(module,dst.model);\n                        value += v1 !== undefined ? v1 : '';\n                    } else {\n                        value += expr;\n                    }\n                }\n                dst.textContent = value;\n            }else{\n                dst.textContent = src.textContent;\n            }\n        }\n        //添加到dom tree，必须放在handleDirectives后，因为有可能directive执行后返回false\n        if(parent){\n            parent.children.push(dst);\n        }\n        return dst;\n    }\n\n    /**\n     * 处理指令\n     * @param module    模块\n     * @param src       编译节点\n     * @param dst       渲染节点\n     * @returns         true继续执行，false不执行后续渲染代码，也不加入渲染树\n    */\n    private static handleDirectives(module,src,dst):boolean {\n        if(!src.directives || src.directives.length===0){\n            return true;\n        }\n        for(let d of src.directives){\n            //model指令不执行\n            if(d.type.name==='model'){\n                continue;\n            }\n            if(!d.exec(module,dst)){\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * 处理属性\n     * @param module    模块\n     * @param src       编译节点\n     * @param dst       渲染节点\n     */\n    private static handleProps(module:Module,src:VirtualDom,dst:IRenderedDom):void{\n        if(dst === this.currentRootDom){\n            module.handleRootProps(src,dst);\n            return;\n        }\n        if(!src.props || src.props.size === 0){\n            return;\n        }\n        for(let k of src.props){\n            dst.props[k[0]] = k[1] instanceof Expression?k[1].val(module,dst.model):k[1];\n        }\n    }\n\n    /**\n     * 更新到html树\n     * @param module    模块\n     * @param src       渲染节点\n     * @returns         渲染后的节点    \n     */\n    public static updateToHtml(module: Module,src:IRenderedDom):Node {\n        let el = module.getElement(src.key);\n        if(!el){\n            return this.renderToHtml(module,src,null);\n        }else if(src.tagName){   //html dom节点已存在\n            //设置element key属性\n            (<any>el).key = src.key;\n            let attrs = (<HTMLElement>el).attributes;\n            let arr = [];\n            if(attrs){\n                for(let i=0;i<attrs.length;i++){\n                    arr.push(attrs[i].name);\n                }\n            }\n            //设置属性\n            for(let p of Object.keys(src.props)){\n                (<HTMLElement>el).setAttribute(p,src.props[p]===undefined?'':src.props[p]);\n                let ind;\n                if((ind=arr.indexOf(p)) !== -1){\n                    arr.splice(ind,1);\n                }\n            }\n            //清理多余attribute\n            if(arr.length>0){\n                for(let a of arr){\n                    (<HTMLElement>el).removeAttribute(a);\n                }\n            }\n            //处理asset\n            if (src.assets) {\n                for (let k of Object.keys(src.assets)) {\n                    el[k] = src.assets[k];\n                }    \n            }\n        }else{  //文本节点\n            (<any>el).textContent = src.textContent;\n        }\n        return el;\n    }\n\n    /**\n     * 渲染到html树\n     * @param module \t        模块\n     * @param src               渲染节点\n     * @param parentEl \t        父html\n     * @param isRenderChild     是否渲染子节点\n     */\n    public static renderToHtml(module: Module,src:IRenderedDom, parentEl:Node,isRenderChild?:boolean):Node {\n        let el;\n        if(src.tagName){\n            el = newEl(src);\n        }else{\n            el = newText(src);\n        }\n        //先创建子节点，再添加到html dom树，避免频繁添加\n        if(el && src.tagName  && isRenderChild){\n            genSub(el, src);\n        }\n        if(el && parentEl){\n            parentEl.appendChild(el);\n        }\n        return el;\n        \n        /**\n         * 新建element节点\n         * @param dom \t\t虚拟dom\n         * @returns \t\t新的html element\n         */\n        function newEl(dom:IRenderedDom): HTMLElement {\n            //style不处理\n            if(dom.tagName === 'style'){\n                return;\n            }\n            let el; \n            if(dom.isSvg){   //是svg节点\n                el = document.createElementNS(\"http://www.w3.org/2000/svg\",dom.tagName);\n                if(dom.tagName === 'svg'){\n                    el.setAttribute('xmlns','http://www.w3.org/2000/svg');\n                }\n            }else{      //普通节点\n                el = document.createElement(dom.tagName);\n            }\n            //把el引用与key关系存放到cache中\n            module.saveElement(dom.key,el);\n            //设置element key属性\n            (<any>el).key = dom.key;\n            //设置属性\n            for(let p of Object.keys(dom.props)){\n                if(dom.props[p] !== undefined && dom.props[p] !== null && dom.props[p] !== ''){\n                    el.setAttribute(p,dom.props[p]);\n                }\n            }\n            //asset\n            if(dom.assets){\n                for (let p of Object.keys(dom.assets)) {\n                    el[p] = dom.assets[p];\n                }\n            }\n            //解绑之前绑定事件\n            module.eventFactory.unbindAll(dom.key);\n            //绑定事件\n            module.eventFactory.bind(dom.key);\n            return el;\n        }\n\n        /**\n         * 新建文本节点\n         */\n        function newText(dom:IRenderedDom): Node {\n            //样式表处理，如果是样式表文本，则不添加到dom树\n            if(CssManager.handleStyleTextDom(module,dom)){\n                 return;\n            }\n            let node = document.createTextNode(<string>dom.textContent || '');\n            module.saveElement(dom.key,node);\n            return node;\n        }\n\n        /**\n         * 生成子节点\n         * @param pEl \t父节点\n         * @param vdom  虚拟dom节点\t\n         */\n        function genSub(pEl: Node, vdom: IRenderedDom) {\n            if (vdom.children && vdom.children.length > 0) {\n                vdom.children.forEach(item => {\n                    let el1;\n                    if (item.tagName) {\n                        el1 = newEl(item);\n                        genSub(el1, item);\n                    } else {\n                        el1 = newText(item);\n                    }\n                    if(el1){\n                        pEl.appendChild(el1);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * 处理更改的dom节点\n     * @param module        待处理模块\n     * @param changeDoms    更改的dom参数数组，数组元素说明如下：\n     *                      0:type(操作类型) add 1, upd 2,del 3,move 4 ,rep 5\n     *                      1:dom           待处理节点\n     *                      2:dom1          被替换或修改节点，rep时有效    \n     *                      3:parent        父节点\n     *                      4:loc           位置,add和move时有效\n     */\n    public static handleChangedDoms(module:Module,changeDoms:any[]){\n        //替换数组\n        const repArr =[];\n        //添加数组\n        const addArr = [];\n        //移动数组\n        const moveArr = [];\n        //保留原有html节点\n        for (let item of changeDoms) {\n            switch(item[0]){\n                case 1:  //添加\n                    addArr.push(item);\n                    break;\n                case 2: //修改\n                    Renderer.updateToHtml(module, item[1]);\n                    break;\n                case 3: //删除\n                    const pEl = module.getElement(item[3].key);\n                    const n1 = module.getElement(item[1].key);\n                    if (pEl && n1 && n1.parentElement === pEl) {\n                        pEl.removeChild(n1);\n                    }\n                    module.domManager.freeNode(item[1]);\n                    break;\n                case 4: //移动\n                    moveArr.push(item);\n                    break;\n                default: //替换\n                    repArr.push(item);\n            }\n        }\n\n        //替换\n        if(repArr.length>0){\n            for(let item of repArr){\n                const pEl = module.getElement(item[3].key);\n                let n2;\n                if(item[2].moduleId){ //子模块先free再获取，先还原为空文本，再实现新的子模块mount\n                    module.domManager.freeNode(item[2]);\n                    n2 = module.getElement(item[2].key);\n                }else{  //先获取，再free，避免getElement为null\n                    n2 = module.getElement(item[2].key);\n                    module.domManager.freeNode(item[2]);\n                }\n                //替换n2在element map中的值\n                const n1 = Renderer.renderToHtml(module, item[1], null, true);\n                if (pEl && n2) {\n                    pEl.replaceChild(n1, n2);\n                }\n            }\n        }\n\n        //addArr 按index排序\n        if(addArr.length > 1){\n            addArr.sort((a,b)=>a[4]>b[4]?1:-1);\n        }\n        //操作map，用于存放添加或移动过的位置\n        const opMap = moveArr.length>0?{}:undefined;\n        //处理添加元素\n        for(let item of addArr){\n            const pEl = <HTMLElement>module.getElement(item[3].key);\n            const n1 = Renderer.renderToHtml(module, item[1], null, true);\n            if (pEl.childNodes && pEl.childNodes.length > item[4]) {\n                pEl.insertBefore(n1, pEl.childNodes[item[4]]);\n            }\n            else {\n                pEl.appendChild(n1);\n            }\n            //记录操作位置\n            if(opMap){\n                opMap[item[3].key + '_' + item[4]] = true;\n            }\n        }\n        //处理move元素\n        for(let item of moveArr){\n            const pEl = <HTMLElement>module.getElement(item[3].key);\n            const n1 = module.getElement(item[1].key);\n            if(!n1 || n1 === pEl.childNodes[item[4]]){\n                continue;\n            }\n            //判断是否需要用空节点填充移走后的位置\n            if(!opMap[item[3].key + '_' + item[5]]){\n                const emptyDom = document.createTextNode('');\n                //新放到指定位置\n                if (pEl.childNodes.length > item[5]) {\n                    pEl.insertBefore(emptyDom, pEl.childNodes[item[5]]);\n                }else { //最后一个与当前节点不相同，则放在最后\n                    pEl.appendChild(emptyDom);\n                }\n            }\n            //替换到指定位置\n            pEl.replaceChild(n1,pEl.childNodes[item[4]]);\n            //记录操作的位置\n            opMap[item[3].key + '_' + item[4]] = true;\n        }\n    }\n}","import { NError } from \"./error\";\nimport { NodomMessage } from \"./nodom\";\nimport { Util } from \"./util\";\n\nexport class RequestManager{\n    /**\n     * 拒绝相同请求（url，参数）时间间隔\n     */\n    static rejectReqTick:number = 500;\n    /**\n     * 请求map，用于缓存之前的请求url和参数\n     * key:     url\n     * value:   请求参数\n     */\n    static requestMap:Map<string,any> = new Map();\n    /**\n     * ajax 请求\n     * @param config    object 或 string\n     *                  如果为string，则直接以get方式获取资源\n     *                  object 项如下:\n     *                  参数名|类型|默认值|必填|可选值|描述\n     *                  -|-|-|-|-|-\n     *                  url|string|无|是|无|请求url\n     *\t\t\t\t\tmethod|string|GET|否|GET,POST,HEAD|请求类型\n     *\t\t\t\t\tparams|Object/FormData|{}|否|无|参数，json格式\n     *\t\t\t\t\tasync|bool|true|否|true,false|是否异步\n     *  \t\t\t\ttimeout|number|0|否|无|请求超时时间\n     *                  type|string|text|否|json,text|\n     *\t\t\t\t\twithCredentials|bool|false|否|true,false|同源策略，跨域时cookie保存\n     *                  header|Object|无|否|无|request header 对象\n     *                  user|string|无|否|无|需要认证的请求对应的用户名\n     *                  pwd|string|无|否|无|需要认证的请求对应的密码\n     *                  rand|bool|无|否|无|请求随机数，设置则浏览器缓存失效\n     */\n    static async request(config): Promise<any> {\n        const time = Date.now();\n        if(this.requestMap.has(config.url)){\n            const obj = this.requestMap.get(config.url);\n            if(time - obj.time < this.rejectReqTick && Util.compare(obj.params,config.params)){\n                return;\n            }\n        }\n        this.requestMap.set(config.url,{\n            time:time,\n            params:config.params\n        });\n        return new Promise((resolve, reject) => {\n            if (typeof config === 'string') {\n                config = {\n                    url: config\n                }\n            }\n            config.params = config.params || {};\n            //随机数\n            if (config.rand) { //针对数据部分，仅在app中使用\n                config.params.$rand = Math.random();\n            }\n            let url: string = config.url;\n            const async: boolean = config.async === false ? false : true;\n            const req: XMLHttpRequest = new XMLHttpRequest();\n            //设置同源策略\n            req.withCredentials = config.withCredentials;\n            //类型默认为get\n            const method: string = (config.method || 'GET').toUpperCase();\n            //超时，同步时不能设置\n            req.timeout = async ? config.timeout : 0;\n\n            req.onload = () => {\n                if (req.status === 200) {\n                    let r = req.responseText;\n                    if (config.type === 'json') {\n                        try {\n                            r = JSON.parse(r);\n                        } catch (e) {\n                            reject({ type: \"jsonparse\" });\n                        }\n                    }\n                    resolve(r);\n                } else {\n                    reject({ type: 'error', url: url });\n                }\n            }\n\n            req.ontimeout = () => reject({ type: 'timeout' });\n            req.onerror = () => reject({ type: 'error', url: url });\n            //上传数据\n            let data = null;\n            switch (method) {\n                case 'GET':\n                    //参数\n                    let pa: string;\n                    if (Util.isObject(config.params)) {\n                        let ar: string[] = [];\n                        for(let k of Object.keys(config.params)){\n                            const v = config.params[k];\n                            if(v === undefined || v === null){\n                                continue;\n                            }\n                            ar.push(k + '=' + v);\n                        }\n                        pa = ar.join('&');\n                    }\n                    if (pa !== undefined) {\n                        if (url.indexOf('?') !== -1) {\n                            url += '&' + pa;\n                        } else {\n                            url += '?' + pa;\n                        }\n                    }\n\n                    break;\n                case 'POST':\n                    if (config.params instanceof FormData) {\n                        data = config.params;\n                    } else {\n                        let fd: FormData = new FormData();\n                        for(let k of Object.keys(config.params)){\n                            const v = config.params[k];\n                            if(v === undefined || v === null){\n                                continue;\n                            }\n                            fd.append(k, v);\n                        }\n                        data = fd;                  \n                    }\n                    break;\n            }\n\n            req.open(method, url, async, config.user, config.pwd);\n            //设置request header\n            if (config.header) {\n                Util.getOwnProps(config.header).forEach((item) => {\n                    req.setRequestHeader(item, config.header[item]);\n                })\n            }\n            req.send(data);\n        }).catch((re) => {\n            switch (re.type) {\n                case \"error\":\n                    throw new NError(\"notexist1\", NodomMessage.TipWords['resource'], re.url);\n                case \"timeout\":\n                    throw new NError(\"timeout\");\n                case \"jsonparse\":\n                    throw new NError(\"jsonparse\");\n            }\n        });\n    }\n\n    /**\n     * 清除超时缓存请求信息\n     */\n    static clearCache(){\n        const time = Date.now();\n        for(let key of this.requestMap.keys()){\n            if(time - this.requestMap.get(key).time > this.rejectReqTick){\n                this.requestMap.delete(key);\n            }\n        }\n    }\n}","import { IRouteCfg } from \"./types\";\nimport { Util } from \"./util\";\n\n/**\n * 路由类\n */\n export class Route {\n    /**\n     * 路由id\n     */\n    id:number;\n    /**\n     * 路由参数名数组\n     */\n    params:Array<string> = [];\n    /**\n     * 路由参数数据\n     */\n    data:any = {};\n    /**\n     * 子路由\n     */\n    children:Array<Route> = [];\n    /**\n     * 进入路由事件方法\n     */\n    onEnter:Function;\n    /**\n     * 离开路由方法\n     */\n    onLeave:Function;\n    \n    /**\n     * 路由路径\n     */\n    path:string;\n    /**\n     * 完整路径\n     */\n    fullPath:string;\n\n    /**\n     * 路由对应模块对象或类或模块类名\n     */\n    module:any;\n    \n    /**\n     * 模块路径，当module为类名时需要，默认执行延迟加载\n     */\n    modulePath:string;\n\n    /**\n     * 父路由\n     */\n    parent:Route;\n\n    /**\n     * \n     * @param config 路由配置项\n     */\n    constructor(config?:IRouteCfg,parent?:Route) {\n        if (!config || Util.isEmpty(config.path)) {\n            return;\n        }\n        this.id = Util.genId();\n        //参数赋值\n        for(let o of Object.keys(config)){\n            this[o] = config[o];   \n        }\n        this.parent = parent;\n        //解析路径\n        if(this.path){\n            this.parse();\n        }\n        if(parent){\n            parent.addChild(this);\n        }\n        //子路由\n        if (config.routes && Array.isArray(config.routes)) {\n            config.routes.forEach((item) => {\n                new Route(item,this);\n            });\n        }\n    }\n    \n    /**\n     * 添加子路由\n     * @param child \n     */\n    public addChild(child:Route){\n        this.children.push(child);\n        child.parent = this;\n    }\n\n    /**\n     * 通过路径解析路由对象\n     */\n    private parse(){\n        let pathArr:Array<string> = this.path.split('/');\n        let node:Route = this.parent;\n        let param:Array<string> = [];\n        let paramIndex:number = -1; //最后一个参数开始\n        let prePath:string = '';    //前置路径\n        for (let i = 0; i < pathArr.length; i++) {\n            let v = pathArr[i].trim();\n            if (v === '') {\n                pathArr.splice(i--, 1);\n                continue;\n            }\n\n            if (v.startsWith(':')) { //参数\n                if (param.length === 0) {\n                    paramIndex = i;\n                }\n                param.push(v.substring(1));\n            } else {\n                paramIndex = -1;\n                param = []; //上级路由的参数清空\n                this.path = v; //暂存path\n                let j = 0;\n                for (; j < node.children.length; j++) {\n                    let r = node.children[j];\n                    if (r.path === v) {\n                        node = r;\n                        break;\n                    }\n                }\n\n                //没找到，创建新节点\n                if (j === node.children.length) {\n                    if (prePath !== '') {\n                        new Route({ path: prePath},node);\n                        node = node.children[node.children.length - 1];\n                    }\n                    prePath = v;\n                }\n            }\n\n            //不存在参数\n            this.params = paramIndex===-1?[]:param;\n        }\n    }\n\n    /**\n     * 克隆\n     * @returns 克隆对象\n     */\n    clone(){\n        let r = new Route();\n        Object.getOwnPropertyNames(this).forEach(item=>{\n            if(item === 'data'){    \n                return;\n            }\n            r[item] = this[item];\n        });\n        if(this.data){\n            r.data = Util.clone(this.data);\n        }\n        return r;\n    }\n}","import { NError } from \"./error\";\nimport { Util } from \"./util\";\n\n/**\n * 调度器，用于每次空闲的待操作序列调度\n */\nexport class Scheduler{\n\tprivate static tasks:Array<any> = [];\n\tpublic static dispatch(){\n\t\tScheduler.tasks.forEach((item)=>{\n\t\t\tif(Util.isFunction(item.func)){\n\t\t\t\tif(item.thiser){\n\t\t\t\t\titem.func.call(item.thiser);\n\t\t\t\t}else{\n\t\t\t\t\titem.func();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * 启动调度器\n\t * @param scheduleTick \t渲染间隔\n\t */\n\tpublic static start(scheduleTick?:number){\n\t\tScheduler.dispatch();\n\t\tif(window.requestAnimationFrame){\n\t\t\twindow.requestAnimationFrame(Scheduler.start);\n\t\t}else{\n\t\t\twindow.setTimeout(Scheduler.start,scheduleTick||50);\n\t\t}\t\t\n\t}\n\n\t/**\n\t * 添加任务\n\t * @param foo \t\t任务和this指向\n\t * @param thiser \tthis指向\n\t */\n\tpublic static addTask(foo:Function,thiser?:any){\n\t\tif(!Util.isFunction(foo)){\n\t\t\tthrow new NError(\"invoke\",\"Scheduler.addTask\",\"0\",\"function\");\n\t\t}\n\t\t\n\t\tScheduler.tasks.push({func:foo,thiser:thiser});\n\t}\n\n\t/**\n\t * 移除任务\n\t * @param foo \t任务\n\t */\n\tpublic static removeTask(foo){\n\t\tif(!Util.isFunction(foo)){\n\t\t\tthrow new NError(\"invoke\",\"Scheduler.removeTask\",\"0\",\"function\");\n\t\t}\n\t\tlet ind = -1;\n\t\tif((ind = Scheduler.tasks.indexOf(foo)) !== -1){\n\t\t\tScheduler.tasks.splice(ind,1);\n\t\t}\t\n\t}\n}\n","import { DirectiveManager } from \"./directivemanager\";\nimport { NError } from \"./error\";\nimport { NodomMessage_en } from \"./locales/msg_en\";\nimport { NodomMessage_zh } from \"./locales/msg_zh\";\nimport { ModuleFactory } from \"./modulefactory\";\nimport { Renderer } from \"./renderer\";\nimport { RequestManager } from \"./requestmanager\";\nimport { Route } from \"./route\";\nimport { Scheduler } from \"./scheduler\";\nimport { IRouteCfg } from \"./types\";\nimport { Util } from \"./util\";\n\n/**\n * nodom提示消息\n */\nexport var NodomMessage=NodomMessage_zh;\n\n/**\n * nodom 类\n */\nexport class Nodom{\n    /**\n     * 新建一个App\n     * @param clazz     模块类\n     * @param selector  el选择器\n     */\n    public static app(clazz:any,selector:string){\n        //设置渲染器的根 element\n        Renderer.setRootEl(document.querySelector(selector)||document.body);\n        //渲染器启动渲染\n        Scheduler.addTask(Renderer.render, Renderer);\n        //启动调度器\n        Scheduler.start();\n        \n        let mdl:any = ModuleFactory.get(clazz);\n        mdl.active();\n    }\n\n    /**\n     * 设置语言\n     * @param lang  语言（zh,en），默认zh\n     */\n    public static setLang(lang:string){\n        //设置nodom语言\n        switch(lang||'zh'){\n            case 'zh':\n                NodomMessage = NodomMessage_zh;\n                break;\n            case 'en':\n                NodomMessage = NodomMessage_en;\n        }\n    }\n\n    /**\n     * use插件（实例化）\n     * 插件实例化后以单例方式存在，第二次use同一个插件，将不进行任何操作，实例化后可通过Nodom['$类名']方式获取\n     * @param clazz     插件类\n     * @param params    参数\n     * @returns         实例化后的插件对象\n     */\n    public static use(clazz:any,params?:any[]):any{\n        if(!clazz.name){\n            new NError('notexist',NodomMessage.TipWords.plugin);\n        }\n        if(!this['$'+clazz.name]){\n            this['$'+clazz.name] = Reflect.construct(clazz,params||[]); \n        }\n        return this['$'+clazz.name];\n    }\n\n    /**\n     * 暴露的创建路由方法\n     * @param config  数组或单个配置\n     */\n    public static createRoute(config: IRouteCfg | Array<IRouteCfg>,parent?:Route): Route {\n        if(!Nodom['$Router']){\n            throw new NError('uninit',NodomMessage.TipWords.route)\n        }\n        \n        let route:Route;\n        parent = parent || Nodom['$Router'].getRoot();\n        if (Util.isArray(config)) {\n            for (let item of <Array<IRouteCfg>>config) {\n                route = new Route(item,parent);\n            }\n        } else {\n            route = new Route(<IRouteCfg>config,parent);\n        }\n        return route;\n    }\n\n    /**\n     * 创建指令\n     * @param name      指令名 \n     * @param priority  优先级（1最小，1-10为框架保留优先级）\n     * @param init      初始化方法\n     * @param handler   渲染时方法\n     */\n    public static createDirective(name: string, handler: Function,priority?: number) {\n        return DirectiveManager.addType(name,handler,priority);\n    }\n\n    /**\n     * 注册模块\n     * @param clazz     模块类\n     * @param name      注册名，如果没有，则为类名\n     */\n    public static registModule(clazz:any,name?:string){\n        ModuleFactory.addClass(clazz,name);\n    }\n\n    /**\n     * ajax 请求\n     * @param config    object 或 string\n     *                  如果为string，则直接以get方式获取资源\n     *                  object 项如下:\n     *                  参数名|类型|默认值|必填|可选值|描述\n     *                  -|-|-|-|-|-\n     *                  url|string|无|是|无|请求url\n     *\t\t\t\t\tmethod|string|GET|否|GET,POST,HEAD|请求类型\n     *\t\t\t\t\tparams|Object/FormData|{}|否|无|参数，json格式\n     *\t\t\t\t\tasync|bool|true|否|true,false|是否异步\n     *  \t\t\t\t    timeout|number|0|否|无|请求超时时间\n     *                  type|string|text|否|json,text|\n     *\t\t\t\t\twithCredentials|bool|false|否|true,false|同源策略，跨域时cookie保存\n     *                  header|Object|无|否|无|request header 对象\n     *                  user|string|无|否|无|需要认证的请求对应的用户名\n     *                  pwd|string|无|否|无|需要认证的请求对应的密码\n     *                  rand|bool|无|否|无|请求随机数，设置则浏览器缓存失效\n     */\n    public static async request(config): Promise<any> {\n        return await RequestManager.request(config);\n    }\n}\n\n/**\n * Nodom.app的简写方式\n * @param clazz     模块类\n * @param el        根容器\n */\nexport function nodom(clazz:any,el:string){\n    return Nodom.app(clazz,el);\n}\n\n\n","import { NodomMessage } from \"./nodom\";\n\n/**\n * 异常处理类\n * @since       1.0.0\n */\nexport  class NError extends Error{\n    constructor(errorName:string,p1?:string,p2?:string,p3?:string,p4?:string){\n        super(errorName);\n        let msg:string = NodomMessage.ErrorMsgs[errorName];\n        if(msg === undefined){\n            this.message = \"未知错误\";\n            return;\n        }\n        //复制请求参数\n        let params:Array<string> = [msg];\n        for(let i=1;i<arguments.length;i++){\n            params.push(arguments[i]);\n        }\n        this.message = this.compile.apply(null,params);\n    }\n\n    /**\n     * 编译字符串，把{n}替换成带入值\n     * @param src   待编译的字符串\n     * @returns     转换后的消息\n     */\n    private compile(src: string, p1?: any, p2?: any, p3?: any, p4?: any, p5?: any): string {\n        let reg: RegExp;\n        let args = arguments;\n        let index = 0;\n        for (; ;) {\n            if (src.indexOf('\\{' + index + '\\}') !== -1) {\n                reg = new RegExp('\\\\{' + index + '\\\\}', 'g');\n                src = src.replace(reg, args[index + 1]);\n                index++;\n            } else {\n                break;\n            }\n        }\n        return src;\n    }\n}   \n","import { NError } from \"./error\";\nimport { NodomMessage } from \"./nodom\";\nimport { VirtualDom } from \"./virtualdom\";\n/**\n * 基础服务库\n * @since       1.0.0\n */\nexport class Util {\n    /**\n     * 全局id\n     */\n    private static generatedId: number = 1;\n    \n    /**\n     * js 保留字 map\n     */\n    public static keyWordMap = new Map();\n    \n    /**\n     * 唯一主键\n     */\n    public static genId() {\n        return this.generatedId++;\n    }\n\n    /**\n     * 初始化保留字map\n     */\n    public static initKeyMap(){\n        [\n            'arguments','boolean','break','byte','catch',\n            'char','const','default','delete','do',\n            'double','else','enum','eval','false',\n            'float','for','function','goto','if',\n            'in','instanceof','int','let','long',\n            'null','return','short','switch','this',\n            'throw','true','try','this','throw',\n            'typeof','var','while','with','Array',\n            'Date','JSON', 'Set','Map','eval',\n            'Infinity','isFinite','isNaN','isPrototypeOf','Math',\n            'new','NaN','Number','Object','prototype','String',\n            'isPrototypeOf','undefined','valueOf'\n        ].forEach(item=>{\n            this.keyWordMap.set(item,true);\n        });\n    }\n    /**\n     * 是否为 js 保留关键字\n     * @param name  名字\n     * @returns     如果为保留字，则返回true，否则返回false\n     */\n    public static isKeyWord(name:string):boolean{\n        return this.keyWordMap.has(name);\n    }\n\n    /******对象相关******/\n\n    /**\n     * 对象复制\n     * @param srcObj    源对象\n     * @param expKey    不复制的键正则表达式或名\n     * @param extra     clone附加参数\n     * @returns         复制的对象\n     */\n\n    public static clone(srcObj: Object, expKey?: RegExp | string[], extra?: any): any {\n        let me = this;\n        let map: WeakMap<Object, any> = new WeakMap();\n        return clone(srcObj, expKey, extra);\n\n        /**\n         * clone对象\n         * @param src      待clone对象\n         * @param expKey   不克隆的键\n         * @param extra    clone附加参数\n         * @returns        克隆后的对象\n         */\n        function clone(src, expKey, extra?) {\n            //非对象或函数，直接返回            \n            if (!src || typeof src !== 'object' || Util.isFunction(src)) {\n                return src;\n            }\n            let dst;\n\n            //带有clone方法，则直接返回clone值\n            if (src.clone && Util.isFunction(src.clone)) {\n                return src.clone(extra);\n            } else if (me.isObject(src)) {\n                dst = new Object();\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\n                map.set(src, dst);\n                Object.getOwnPropertyNames(src).forEach((prop) => {\n                    //不克隆的键\n                    if (expKey) {\n                        if (expKey.constructor === RegExp && (<RegExp>expKey).test(prop) //正则表达式匹配的键不复制\n                            || Util.isArray(expKey) && (<any[]>expKey).includes(prop)    //被排除的键不复制\n                        ) {\n                            return;\n                        }\n                    }\n                    dst[prop] = getCloneObj(src[prop], expKey, extra);\n                });\n            } else if (me.isMap(src)) {\n                dst = new Map();\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\n                src.forEach((value, key) => {\n                    //不克隆的键\n                    if (expKey) {\n                        if (expKey.constructor === RegExp && (<RegExp>expKey).test(key)       //正则表达式匹配的键不复制\n                            || (<any[]>expKey).includes(key)) {     //被排除的键不复制\n                            return;\n                        }\n                    }\n                    dst.set(key, getCloneObj(value, expKey, extra));\n                });\n            } else if (me.isArray(src)) {\n                dst = new Array();\n                //把对象加入map，如果后面有新克隆对象，则用新克隆对象进行覆盖\n                src.forEach(function (item, i) {\n                    dst[i] = getCloneObj(item, expKey, extra);\n                });\n            }\n            return dst;\n        }\n\n        /**\n         * 获取clone对象\n         * @param value     待clone值\n         * @param expKey    排除键\n         * @param extra     附加参数\n         */\n        function getCloneObj(value, expKey, extra) {\n            if (typeof value === 'object' && !Util.isFunction(value)) {\n                let co = null;\n                if (!map.has(value)) {  //clone新对象\n                    co = clone(value, expKey, extra);\n                } else {                    //从map中获取对象\n                    co = map.get(value);\n                }\n                return co;\n            }\n            return value;\n        }\n    }\n    \n    /**\n     * 比较两个对象值是否相同(只比较object和array)\n     * @param src   源对象\n     * @param dst   目标对象 \n     * @returns     值相同则返回true，否则返回false \n     */\n    public static compare(src:any,dst:any):boolean{\n        return cmp(src,dst);\n        function cmp(o1,o2){\n            if(o1 === o2){\n                return true;\n            }\n            let keys1 = Object.keys(o1);\n            let keys2 = Object.keys(o2);\n            if(keys1.length !== keys2.length){\n                return false;\n            }\n            for(let k of keys1){\n                if(typeof o1[k] === 'object' && typeof o2[k] === 'object'){\n                    let r = cmp(o1[k],o2[k]);\n                    if(!r){\n                        return false;\n                    }\n                }else if(o1[k] !== o2[k]){\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    /**\n     * 获取对象自有属性\n     * @param obj   需要获取属性的对象\n     * @returns     返回属性数组\n     */\n    public static getOwnProps(obj): Array<string> {\n        if (!obj) {\n            return [];\n        }\n        return Object.getOwnPropertyNames(obj);\n    }\n    /**************对象判断相关************/\n    /**\n     * 判断是否为函数\n     * @param foo   检查的对象\n     * @returns     true/false\n     */\n    public static isFunction(foo): boolean {\n        return foo !== undefined && foo !== null && foo.constructor === Function;\n    }\n\n    /**\n     * 判断是否为数组\n     * @param obj   检查的对象\n     * @returns     true/false\n     */\n    public static isArray(obj): boolean {\n        return Array.isArray(obj);\n    }\n\n    /**\n     * 判断是否为map\n     * @param obj   检查的对象\n     */\n    public static isMap(obj): boolean {\n        return obj !== null && obj !== undefined && obj.constructor === Map;\n    }\n\n    /**\n     * 判断是否为对象\n     * @param obj   检查的对象\n     * @returns     true/false\n     */\n    public static isObject(obj): boolean {\n        return obj !== null && obj !== undefined && obj.constructor === Object;\n    }\n\n    /**\n     * 判断对象/字符串是否为空\n     * @param obj   检查的对象\n     * @returns     true/false\n     */\n    public static isEmpty(obj): boolean {\n        if (obj === null || obj === undefined)\n            return true;\n        let tp = typeof obj;\n        if (this.isObject(obj)) {\n            let keys = Object.keys(obj);\n            if (keys !== undefined) {\n                return keys.length === 0;\n            }\n        } else if (tp === 'string') {\n            return obj === '';\n        }\n        return false;\n    }\n\n    /******日期相关******/\n    /**\n     * 日期格式化\n     * @param timestamp  时间戳\n     * @param format     日期格式\n     * @returns          日期串\n     */\n    public static formatDate(timeStamp: string | number, format: string): string {\n        if (typeof timeStamp === 'string') {\n            //排除日期格式串,只处理时间戳\n            let reg = /^\\d+$/;\n            if (reg.test(<string>timeStamp)) {\n                timeStamp = Number(<string>timeStamp);\n            } else {\n                throw new NError('invoke', 'Util.formatDate', '0', 'date string', 'date');\n            }\n        } \n        //得到日期\n        let date: Date = new Date(timeStamp);\n        // invalid date\n        if (isNaN(date.getDay())) {\n            throw new NError('invoke', 'Util.formatDate', '0', 'date string', 'date');\n        }\n\n        let o = {\n            \"M+\": date.getMonth() + 1, //月份\n            \"d+\": date.getDate(), //日\n            \"h+\": date.getHours(), //小时\n            \"H+\": date.getHours(), //小时\n            \"m+\": date.getMinutes(), //分\n            \"s+\": date.getSeconds(), //秒\n            \"S\": date.getMilliseconds() //毫秒\n        };\n\n        let re;\n        //年\n        if (re=/(y+)/.exec(format)) {\n            format = format.replace(re[0], (date.getFullYear() + \"\").substring(4 - re[0].length));\n        }\n        //月日\n        this.getOwnProps(o).forEach(function (k) {\n            if (re=new RegExp(\"(\" + k + \")\").exec(format)) {\n                format = format.replace(re[0], re[0].length===1?o[k]:(\"00\" + o[k]).substring((o[k]+'').length));\n            }\n        });\n\n        //星期\n        format = format.replace(/(E+)/, NodomMessage.WeekDays[date.getDay() + \"\"]);\n        return format;\n    }\n\n    /******字符串相关*****/\n    /**\n     * 编译字符串，把{n}替换成带入值\n     * @param src   待编译的字符串\n     * @returns     转换后的消息\n     */\n    public static compileStr(src: string, p1?: any, p2?: any, p3?: any, p4?: any, p5?: any): string {\n        let reg: RegExp;\n        let args = arguments;\n        let index = 0;\n        for (; ;) {\n            if (src.indexOf('\\{' + index + '\\}') !== -1) {\n                reg = new RegExp('\\\\{' + index + '\\\\}', 'g');\n                src = src.replace(reg, args[index + 1]);\n                index++;\n            } else {\n                break;\n            }\n        }\n        return src;\n    }\n\n    /**\n     * 改造 dom key，避免克隆时重复，格式为：key_id\n     * @param node    节点\n     * @param id      附加id\n     * @param deep    是否深度处理\n     */\n    public static setNodeKey(node:VirtualDom, id?:number,deep?:boolean){\n        node.key = node.key + '_' + id;\n        if(deep && node.children){\n            for(let c of node.children) {\n                Util.setNodeKey(c,id,true);\n            }\n        }\n    }\n}\n\n//初始化keymap\nUtil.initKeyMap();","import { DirectiveManager } from \"./directivemanager\";\nimport { DirectiveType } from \"./directivetype\";\nimport { Module } from \"./module\";\nimport { Util } from \"./util\";\nimport { Expression } from \"./expression\";\nimport { NError } from \"./error\";\nimport { NodomMessage } from \"./nodom\";\nimport { IRenderedDom } from \"./types\";\n\n/**\n * 指令类\n */\nexport  class Directive {\n    /**\n     * 指令id\n     */\n    public id:number;\n\n    /**\n     * 指令类型\n     */\n    public type:DirectiveType;\n    \n    /**\n     * 指令值\n     */\n    public value:any;\n    \n    /**\n     * 表达式\n     */\n    public expression:Expression;\n\n    /**\n     * 禁用指令\n     */\n    public disabled:boolean;\n\n    /**\n     * 指令参数\n     */\n    public params:any;\n\n    /**\n     * 模板所属的module id，指令用于哪个模板，则该属性指向模板对应的模块id\n     */\n    public templateModuleId:number;\n\n    /**\n     * 构造方法\n     * @param type  \t    类型名\n     * @param value \t    指令值\n     * @param templateMid   模板所属的module id，即指令用于哪个模板，则该参数指向模板对应的模块id\n     */\n    constructor(type?:string,value?:string|Expression,templateMid?:number) {\n        this.id = Util.genId();\n        if(type){\n            this.type = DirectiveManager.getType(type);\n            if(!this.type){\n                throw new NError('notexist1',NodomMessage.TipWords['directive'],type);\n            }\n        }\n        if (typeof value === 'string') {\n            this.value = (<string>value).trim();\n        }else if(value instanceof Expression){\n            this.expression = value;\n        }else{\n            this.value = value;\n        }\n        this.templateModuleId = templateMid;\n    }\n\n    /**\n     * 执行指令\n     * @param module    模块\n     * @param dom       渲染目标节点对象\n     * @returns         true/false\n     */\n    public exec(module:Module,dom:IRenderedDom):boolean {\n        //禁用，不执行\n        if(this.disabled){\n            return true;\n        }\n        if(this.expression){\n            this.value = this.expression.val(module,dom.model);\n        }\n        return this.type.handle.apply(this,[module,dom]);\n    }\n\n    /**\n     * 克隆\n     */\n    public clone():Directive{\n        let d = new Directive();\n        d.type = this.type;\n        d.expression = this.expression;\n        d.value = this.value;\n        d.templateModuleId = this.templateModuleId;\n        return d;\n    }\n}\n","import { Module } from \"./module\";\nimport { Util } from \"./util\";\nimport { IRenderedDom } from \"./types\";\nimport { Expression } from \"./expression\";\n\n/**\n * 事件类\n * @remarks\n * 事件分为自有事件和代理事件\n * @author      yanglei\n * @since       1.0\n */\nexport class NEvent {\n    /**\n     * 事件id\n     */\n    public id: number;\n    /**\n     * 事件所属模块\n     */\n    public module:Module;\n    /**\n     * 事件名\n     */\n    public name: string;\n    /**\n     * 事件处理方法名(需要在模块中定义)、方法函数或表达式\n     */\n    public handler: string | Function;\n    /**\n     * 表达式，当传递事件串为表达式时有效\n     */\n    private expr:Expression;\n    /**\n     * 代理模式，事件代理到父对象\n     */\n    public delg: boolean;\n    /**\n     * 禁止冒泡，代理模式下无效\n     */\n    public nopopo: boolean;\n    /**\n     * 只执行一次\n     */\n    public once: boolean;\n\n    /**\n     * 使用 capture，代理模式下无效\n     */\n    public capture: boolean;\n\n    /**\n     * 依赖事件，用于扩展事件存储原始事件\n     */\n    public dependEvent:NEvent;\n    \n\n    /**\n     * @param eventName     事件名\n     * @param eventStr      事件串或事件处理函数,以“:”分割,中间不能有空格,结构为: 方法名[:delg(代理到父对象):nopopo(禁止冒泡):once(只执行一次):capture(useCapture)]\n     *                      如果为函数，则替代第三个参数\n     * @param handler       事件执行函数，如果方法不在module methods中定义，则可以直接申明，eventStr第一个参数失效，即eventStr可以是\":delg:nopopo...\"\n     */\n    constructor(module:Module,eventName: string, eventStr?: string | Function | Expression, handler?: Function) {\n        this.id = Util.genId();\n        this.module = module;\n        this.name = eventName;\n        //如果事件串不为空，则不需要处理\n        if (eventStr) {\n            let tp = typeof eventStr;\n            if (tp === 'string') {\n                this.parseEvent((<string>eventStr).trim());\n            } else if(tp === 'function'){\n                this.handler = <Function>eventStr;\n            }else if(eventStr instanceof Expression){\n                this.expr = eventStr;\n            }\n        }\n        //新增事件方法（不在methods中定义）\n        if (handler) {\n            this.handler = handler;\n        }\n        this.touchOrNot();\n    }\n\n    /**\n     * 表达式处理，当handler为expression时有效\n     * @param module    模块\n     * @param model     对应model\n     */\n    public handleExpr(module,model){\n        if(!this.expr){\n            return this;\n        }\n        const evtStr = this.expr.val(module,model);\n        if(evtStr){\n            //新建事件对象\n            return new NEvent(module,this.name,evtStr);\n        }\n    }\n\n    /**\n     * 解析事件字符串\n     * @param eventStr  待解析的字符串\n     */\n    private parseEvent(eventStr){\n        eventStr.split(':').forEach((item, i) => {\n            item = item.trim();\n            if (i === 0) { //事件方法\n                this.handler = item;\n            } else { //事件附加参数\n                switch (item) {\n                    case 'delg':\n                        this.delg = true;\n                        break;\n                    case 'nopopo':\n                        this.nopopo = true;\n                        break;\n                    case 'once':\n                        this.once = true;\n                        break;\n                    case 'capture':\n                        this.capture = true;\n                        break;\n                }\n            }\n        });\n    }\n\n    /**\n     * 触屏转换\n     */\n    private touchOrNot(){\n        if (document.ontouchend) { //触屏设备\n            switch (this.name) {\n                case 'click':\n                    this.name = 'tap';\n                    break;\n                case 'mousedown':\n                    this.name = 'touchstart';\n                    break;\n                case 'mouseup':\n                    this.name = 'touchend';\n                    break;\n                case 'mousemove':\n                    this.name = 'touchmove';\n                    break;\n            }\n        } else { //转非触屏\n            switch (this.name) {\n                case 'tap':\n                    this.name = 'click';\n                    break;\n                case 'touchstart':\n                    this.name = 'mousedown';\n                    break;\n                case 'touchend':\n                    this.name = 'mouseup';\n                    break;\n                case 'touchmove':\n                    this.name = 'mousemove';\n                    break;\n            }\n        }\n    }\n    /**\n     * 设置附加参数值\n     * @param module    模块\n     * @param dom       虚拟dom\n     * @param name      参数名\n     * @param value     参数值\n     */\n    public setParam(module:Module,dom:IRenderedDom,name: string, value: any) {\n        module.objectManager.setEventParam(this.id,dom.key,name,value);\n    }\n\n    /**\n     * 获取附加参数值\n     * @param module    模块\n     * @param dom       虚拟dom\n     * @param name      参数名\n     * @returns         附加参数值\n     */\n    public getParam(module:Module,dom:IRenderedDom,name: string) {\n        return module.objectManager.getEventParam(this.id,dom.key,name);\n    }\n\n    /**\n     * 移除参数\n     * @param module    模块 \n     * @param dom       虚拟dom\n     * @param name      参数名\n     */\n    public removeParam(module:Module,dom:IRenderedDom,name: string) {\n        return module.objectManager.removeEventParam(this.id,dom.key,name);\n    }\n    /**\n     * 清参数cache\n     * @param module    模块\n     * @param dom       虚拟dom\n     */\n    public clearParam(module:Module,dom:IRenderedDom){\n        module.objectManager.clearEventParam(this.id,dom.key);\n    }\n}\n","import { Directive } from './directive'\nimport { DirectiveManager } from './directivemanager'\nimport { NEvent } from './event'\nimport { Expression } from './expression'\nimport { Model } from './model'\nimport { Module } from './module'\nimport { Util } from './util'\n\n/**\n * 虚拟dom\n */\nexport class VirtualDom {\n\t/**\n\t * 元素名，如div\n\t */\n\tpublic tagName: string\n\n\t/**\n\t * key，数字或字符串，整颗虚拟dom树唯一\n\t */\n\tpublic key: any;\n\n\t/**\n\t * 绑定模型\n\t */\n\tpublic model: Model\n\n\t/**\n\t * element为textnode时有效\n\t */\n\tpublic textContent: string\n\n\t/**\n\t * 表达式+字符串数组，用于textnode\n\t */\n\tpublic expressions: Array<Expression | string>\n\n\t/**\n\t * 指令集\n\t */\n\tpublic directives: Directive[]\n\n\t/**\n\t * 直接属性 不是来自于attribute，而是直接作用于html element，如el.checked,el.value等\n\t */\n\tpublic assets: Map<string, any>\n\n\t/**\n\t * 属性(attribute)集合\n\t * {prop1:value1,...}\n\t * 属性值可能是值，也可能是表达式，还可能是数组，当为子模块时，存在从props传递过来的属性，如果模块模版存在相同属性，则会变成数组。\n\t */\n\tpublic props: Map<string, any>\n\n\t/**\n\t * 删除的class名数组\n\t */\n\tprivate removedClassMap: Map<string, boolean>\n\n\t/**\n\t * 删除的style属性名map\n\t */\n\tprivate removedStyleMap: Map<string, boolean>\n\n\t/**\n\t * 事件数组\n\t */\n\tpublic events: Array<NEvent>\n\n\t/**\n\t * 子节点数组[]\n\t */\n\tpublic children: Array<VirtualDom>\n\n\t/**\n\t * 父虚拟dom\n\t */\n\tpublic parent: VirtualDom;\n\n\t/**\n\t * 是否为svg节点\n\t */\n\tisSvg:boolean;\n\n\t/**\n\t * staticNum 静态标识数\n\t *  0 表示静态，不进行比较\n\t *  > 0 每次比较后-1\n\t *  < 0 表达式，每次渲染后不处理\n\t * 默认为1，至少渲染1次\n\t */\n\tpublic staticNum: number\n\n\t/**\n\t * @param tag       标签名\n\t * @param key       key\n\t * @param module \t模块\n\t */\n\tconstructor(tag?: string, key?: number, module?: Module) {\n\t\tthis.key = key || (module ? module.getDomKeyId() : Util.genId())\n\t\tthis.staticNum = 1;\n\t\tif (tag) {\n\t\t\tthis.tagName = tag\n\t\t}\n\t}\n\n\t/**\n\t * 移除多个指令\n\t * @param directives \t待删除的指令类型数组或指令类型\n\t * @returns             如果虚拟dom上的指令集为空，则返回void\n\t */\n\tpublic removeDirectives(directives: string[]) {\n\t\tif (!this.directives) {\n\t\t\treturn\n\t\t}\n\t\t//数组\n\t\tdirectives.forEach((d) => {\n\t\t\tthis.removeDirective(d)\n\t\t})\n\t}\n\n\t/**\n\t * 移除指令\n\t * @param directive \t待删除的指令类型名\n\t * @returns             如果虚拟dom上的指令集为空，则返回void\n\t */\n\tpublic removeDirective(directive: string) {\n\t\tif (!this.directives) {\n\t\t\treturn\n\t\t}\n\n\t\tlet ind\n\t\tif ((ind = this.directives.findIndex(\n\t\t\t\t(item) => item.type.name === directive\n\t\t\t)) !== -1\n\t\t) {\n\t\t\tthis.directives.splice(ind, 1)\n\t\t}\n\t\tif (this.directives.length === 0) {\n\t\t\tdelete this.directives\n\t\t}\n\t}\n\n\t/**\n\t * 添加指令\n\t * @param directive     指令对象\n\t * @param sort          是否排序\n\t * @returns             如果虚拟dom上的指令集不为空，且指令集中已经存在传入的指令对象，则返回void\n\t */\n\tpublic addDirective(directive: Directive, sort?: boolean) {\n\t\tif (!this.directives) {\n\t\t\tthis.directives = [directive];\n\t\t\treturn;\n\t\t} else if (this.directives.find((item) => item.type.name === directive.type.name)){\n\t\t\treturn\n\t\t}\n\t\tthis.directives.push(directive)\n\t\t//指令按优先级排序\n\t\tif (sort) {\n\t\t\tthis.sortDirective()\n\t\t}\n\t}\n\n\t/**\n\t * 指令排序\n\t * @returns           如果虚拟dom上指令集为空，则返回void\n\t */\n\tpublic sortDirective() {\n\t\tif (!this.directives) {\n\t\t\treturn\n\t\t}\n\t\tif (this.directives.length > 1) {\n\t\t\tthis.directives.sort((a, b) => {\n\t\t\t\treturn DirectiveManager.getType(a.type.name).prio <\n\t\t\t\t\tDirectiveManager.getType(b.type.name).prio\n\t\t\t\t\t? -1\n\t\t\t\t\t: 1\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * 是否有某个类型的指令\n\t * @param typeName \t    指令类型名\n\t * @returns             如果指令集不为空，且含有传入的指令类型名则返回true，否则返回false\n\t */\n\tpublic hasDirective(typeName: string): boolean {\n\t\treturn this.directives && this.directives.find(item => item.type.name === typeName) !== undefined;\n\t}\n\n\t/**\n\t * 获取某个类型的指令\n\t * @param module            模块\n\t * @param directiveType \t指令类型名\n\t * @returns                 如果指令集为空，则返回void；否则返回指令类型名等于传入参数的指令对象\n\t */\n\tpublic getDirective(directiveType: string): Directive {\n\t\tif (!this.directives) {\n\t\t\treturn\n\t\t}\n\t\treturn this.directives.find((item) => item.type.name === directiveType)\n\t}\n\n\t/**\n\t * 添加子节点\n\t * @param dom       子节点\n\t * @param index     指定位置，如果不传此参数，则添加到最后\n\t */\n\tpublic add(dom: VirtualDom, index?: number) {\n\t\tif (!this.children) {\n\t\t\tthis.children = []\n\t\t}\n\t\tif (index) {\n\t\t\tthis.children.splice(index, 0, dom)\n\t\t} else {\n\t\t\tthis.children.push(dom)\n\t\t}\n\t\tdom.parent = this\n\t}\n\n\t/**\n\t * 移除子节点\n\t * @param dom   子节点\n\t */\n\tpublic remove(dom: VirtualDom) {\n\t\tlet index = this.children.indexOf(dom)\n\t\tif (index !== -1) {\n\t\t\tthis.children.splice(index, 1)\n\t\t}\n\t}\n\n\t/**\n\t * 添加css class\n\t * @param cls class名或表达式,可以多个，以“空格”分割\n\t */\n\tpublic addClass(cls: string | Expression) {\n\t\tthis.addProp('class', cls)\n\t\t//需要从remove class map 移除\n\t\tif (this.removedClassMap && this.removedClassMap.size > 0) {\n\t\t\tlet arr = (<string>cls).trim().split(/\\s+/)\n\t\t\tfor (let a of arr) {\n\t\t\t\tif (a === '') {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tthis.removedClassMap.delete(a)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 删除css class，因为涉及到表达式，此处只记录删除标识\n\t * @param cls class名,可以多个，以“空格”分割\n\t */\n\tpublic removeClass(cls: string) {\n\t\tlet pv = this.getProp('class')\n\t\tif (!pv) {\n\t\t\treturn\n\t\t}\n\t\tif (!this.removedClassMap) {\n\t\t\tthis.removedClassMap = new Map()\n\t\t}\n\t\tlet arr = cls.trim().split(/\\s+/)\n\t\tfor (let a of arr) {\n\t\t\tif (a === '') {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.removedClassMap.set(a, true)\n\t\t}\n\t\tthis.setStaticOnce()\n\t}\n\n\t/**\n\t * 获取class串\n\t * @returns class 串\n\t */\n\tpublic getClassString(values): string {\n\t\tlet clsArr = []\n\t\tfor (let pv of values) {\n\t\t\tlet arr = pv.trim().split(/\\s+/)\n\t\t\tfor (let a of arr) {\n\t\t\t\tif (!this.removedClassMap || !this.removedClassMap.has(a)) {\n\t\t\t\t\tif (!clsArr.includes(a)) {\n\t\t\t\t\t\tclsArr.push(a)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (clsArr.length > 0) {\n\t\t\treturn clsArr.join(' ')\n\t\t}\n\t}\n\n\t/**\n\t * 添加style\n\t *  @param style style字符串或表达式\n\t */\n\tpublic addStyle(style: string | Expression) {\n\t\tif(!style){\n\t\t\treturn;\n\t\t}\n\t\tthis.addProp('style', style)\n\t\tif (typeof style === 'string') {\n\t\t\t//需要从remove class map 移除\n\t\t\tif (this.removedStyleMap && this.removedStyleMap.size > 0) {\n\t\t\t\tlet arr = style.trim().split(/\\s*;\\s*/)\n\t\t\t\tfor (let a of arr) {\n\t\t\t\t\tif (a === '') {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tlet sa1 = a.split(/\\s*:\\s*/)\n\t\t\t\t\tlet p = sa1[0].trim()\n\t\t\t\t\tif (p !== '') {\n\t\t\t\t\t\tthis.removedClassMap.delete(sa1[0].trim())\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setStaticOnce();\n\t}\n\n\t/**\n\t * 删除style\n\t * @param styleStr style字符串，多个style以空格' '分割\n\t */\n\tpublic removeStyle(styleStr: string) {\n\t\tif (!this.removedClassMap) {\n\t\t\tthis.removedClassMap = new Map()\n\t\t}\n\t\tlet arr = styleStr.trim().split(/\\s+/)\n\t\tfor (let a of arr) {\n\t\t\tif (a === '') {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.removedClassMap.set(a, true)\n\t\t}\n\t\tthis.setStaticOnce()\n\t}\n\n\t/**\n\t * 获取style串\n\t * @returns style 串\n\t */\n\tpublic getStyleString(values): string {\n\t\tlet map = new Map()\n\t\tfor (let pv of values) {\n\t\t\tif(!pv){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet sa = pv.trim().split(/\\s*;\\s*/)\n\t\t\tfor (let s of sa) {\n\t\t\t\tif (s === '') {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlet sa1 = s.split(/\\s*:\\s*/)\n\t\t\t\t//不在移除style map才能加入\n\t\t\t\tif (!this.removedStyleMap || !this.removedStyleMap.has(sa1[0])) {\n\t\t\t\t\tmap.set(sa1[0], sa1[1])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (map.size > 0) {\n\t\t\treturn [...map].map((item) => item.join(':')).join(';')\n\t\t}\n\t}\n\t/**\n\t * 是否拥有属性\n\t * @param propName  属性名\n\t * @param isExpr    是否只检查表达式属性\n\t * @returns         如果属性集含有传入的属性名返回true，否则返回false\n\t */\n\tpublic hasProp(propName: string) {\n\t\tif (this.props) {\n\t\t\treturn this.props.has(propName)\n\t\t}\n\t}\n\n\t/**\n\t * 获取属性值\n\t * @param propName  属性名\n\t * @param isExpr    是否只获取表达式属性\n\t * @returns         传入属性名的value\n\t */\n\tpublic getProp(propName: string, isExpr?: boolean) {\n\t\tif (this.props) {\n\t\t\treturn this.props.get(propName)\n\t\t}\n\t}\n\n\t/**\n\t * 设置属性值\n\t * @param propName  属性名\n\t * @param v         属性值\n\t */\n\tpublic setProp(propName: string, v: any) {\n\t\tif (!this.props) {\n\t\t\tthis.props = new Map()\n\t\t}\n\t\tif (propName === 'style') {\n\t\t\tif (this.removedStyleMap) {\n\t\t\t\t//清空removedStyleMap\n\t\t\t\tthis.removedStyleMap.clear()\n\t\t\t}\n\t\t} else if (propName === 'class') {\n\t\t\tif (this.removedClassMap) {\n\t\t\t\t//清空removedClassMap\n\t\t\t\tthis.removedClassMap.clear()\n\t\t\t}\n\t\t}\n\t\tthis.props.set(propName, v)\n\t\tthis.setStaticOnce();\n\t}\n\n\t/**\n\t * 添加属性，如果原来的值存在，则属性值变成数组\n\t * @param pName     属性名\n\t * @param pValue    属性值\n\t */\n\tpublic addProp(pName, pValue): boolean {\n\t\tlet pv = this.getProp(pName)\n\t\tif (!pv) {\n\t\t\tthis.setProp(pName, pValue)\n\t\t} else if (Array.isArray(pv)) {\n\t\t\tif (pv.includes(pValue)) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tpv.push(pValue)\n\t\t} else if (pv !== pValue) {\n\t\t\tthis.setProp(pName, [pv, pValue])\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\t/**\n\t * 删除属性\n\t * @param props     属性名或属性名数组\n\t * @returns         如果虚拟dom上的属性集为空，则返回void\n\t */\n\tpublic delProp(props: string | string[]) {\n\t\tif (!this.props) {\n\t\t\treturn\n\t\t}\n\t\tif (Util.isArray(props)) {\n\t\t\tfor (let p of <string[]>props) {\n\t\t\t\tthis.props.delete(p)\n\t\t\t}\n\t\t} else {\n\t\t\tthis.props.delete(<string>props)\n\t\t}\n\t\t//设置静态标志，至少要比较一次\n\t\tthis.setStaticOnce()\n\t}\n\n\t/**\n\t * 设置asset\n\t * @param assetName     asset name\n\t * @param value         asset value\n\t */\n\tpublic setAsset(assetName: string, value: any) {\n\t\tif (!this.assets) {\n\t\t\tthis.assets = new Map()\n\t\t}\n\t\tthis.assets.set(assetName, value)\n\t\tthis.setStaticOnce();\n\t}\n\n\t/**\n\t * 删除asset\n\t * @param assetName     asset name\n\t * @returns             如果虚拟dom上的直接属性集为空，则返回void\n\t */\n\tpublic delAsset(assetName: string) {\n\t\tif (!this.assets) {\n\t\t\treturn\n\t\t}\n\t\tthis.assets.delete(assetName)\n\t\tthis.setStaticOnce();\n\t}\n\n\t/**\n\t * 设置cache参数\n\t * @param module    模块\n\t * @param name      参数名\n\t * @param value     参数值\n\t */\n\tpublic setParam(module: Module, name: string, value: any) {\n\t\tmodule.objectManager.setDomParam(this.key, name, value)\n\t}\n\n\t/**\n\t * 获取参数值\n\t * @param module    模块\n\t * @param name      参数名\n\t * @returns         参数值\n\t */\n\tpublic getParam(module: Module, name: string) {\n\t\treturn module.objectManager.getDomParam(this.key, name)\n\t}\n\n\t/**\n\t * 移除参数\n\t * @param module    模块\n\t * @param name      参数名\n\t */\n\tpublic removeParam(module: Module, name: string) {\n\t\tmodule.objectManager.removeDomParam(this.key, name)\n\t}\n\n\t/**\n\t * 设置单次静态标志\n\t */\n\tprivate setStaticOnce() {\n\t\tif (this.staticNum !== -1) {\n\t\t\tthis.staticNum = 1;\n\t\t}\n\t}\n\n\t/**\n\t * 克隆\n\t */\n\tpublic clone(): VirtualDom {\n\t\tlet dst: VirtualDom = new VirtualDom(this.tagName, this.key)\n\t\tif (this.tagName) {\n\t\t\t//属性\n\t\t\tif (this.props && this.props.size > 0) {\n\t\t\t\tfor (let p of this.props) {\n\t\t\t\t\tdst.setProp(p[0], p[1])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.assets && this.assets.size > 0) {\n\t\t\t\tfor (let p of this.assets) {\n\t\t\t\t\tdst.setAsset(p[0], p[1])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.directives && this.directives.length > 0) {\n\t\t\t\tdst.directives = []\n\t\t\t\tfor (let d of this.directives) {\n\t\t\t\t\tdst.directives.push(d.clone())\n\t\t\t\t}\n\t\t\t}\n\t\t\t//复制事件\n\t\t\tdst.events = this.events\n\n\t\t\t//子节点clone\n\t\t\tif (this.children) {\n\t\t\t\tfor (let c of this.children) {\n\t\t\t\t\tdst.add(c.clone())\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdst.expressions = this.expressions\n\t\t\tdst.textContent = this.textContent\n\t\t}\n\t\tdst.staticNum = this.staticNum\n\t\treturn dst\n\t}\n\n\t/**\n\t * 保存事件\n\t * @param event     事件对象\n\t */\n\tpublic addEvent(event: NEvent) {\n\t\tif (!this.events) {\n\t\t\tthis.events = [event]\n\t\t}else if(!this.events.includes(event)){\n\t\t\tthis.events.push(event)\n\t\t}\n\t}\n}\n","import { DefineElementManager } from './defineelementmanager'\r\nimport { Directive } from './directive'\r\nimport { NError } from './error'\r\nimport { NEvent } from './event'\r\nimport { Expression } from './expression'\r\nimport { Module } from './module'\r\nimport { ModuleFactory } from './modulefactory'\r\nimport { VirtualDom } from './virtualdom'\r\n\r\nconst voidTagMap = new Set(\r\n\t'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr'.split(',')\r\n)\r\n\r\n/**\r\n * - 模板标签必须闭合\r\n */\r\n/**\r\n * - 模板标签必须闭合\r\n */\r\nexport class Compiler {\r\n\t/**\r\n\t * 模块\r\n\t */\r\n\tprivate module: Module\r\n\r\n\t/**\r\n\t * 当前节点\r\n\t */\r\n\tprivate current: VirtualDom\r\n\r\n\t/**\r\n\t * 虚拟dom树\r\n\t */\r\n\tprivate domArr: Array<VirtualDom> = []\r\n\r\n\t/**\r\n\t * 文本节点\r\n\t */\r\n\tprivate textArr: Array<any> = []\r\n\r\n\t/**\r\n\t * 是否是表达式文本节点\r\n\t */\r\n\tprivate isExprText: boolean = false\r\n\r\n\t/**\r\n\t * 当前编译的模板 主要用于报错的时候定位\r\n\t */\r\n\tprivate template: string = ''\r\n\r\n\t/**\r\n\t * 根节点\r\n\t */\r\n\tprivate root:VirtualDom;\r\n\r\n\t/**\r\n\t * 当前是否在svg区域\r\n\t */\r\n\tprivate isSvg:boolean;\r\n\t/**\r\n\t * 构造器\r\n\t * @param module\r\n\t */\r\n\tconstructor(module: Module) {\r\n\t\tthis.module = module\r\n\t}\r\n\r\n\t/**\r\n\t * 编译\r\n\t * @param elementStr     待编译html串\r\n\t * @returns              虚拟dom\r\n\t */\r\n\tpublic compile(elementStr: string): VirtualDom {\r\n\t\tif(!elementStr){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// 清除注释\r\n\t\tthis.template = elementStr.replace(/\\<\\!\\-\\-[\\s\\S]*?\\-\\-\\>/g, '').trim()\r\n\t\telementStr = this.template\r\n\t\t// 编译\r\n\t\tthis.compileTemplate(elementStr)\r\n\t\t//处理未关闭节点\r\n\t\tif(this.domArr.length>0){\r\n\t\t\tthis.forceClose(0)\r\n\t\t}\r\n\t\treturn this.root\r\n\t}\r\n\r\n\t/**\r\n\t * 产生dom key\r\n\t * @returns   dom key\r\n\t */\r\n\tprivate genKey(): number {\r\n\t\treturn this.module.getDomKeyId()\r\n\t}\r\n\r\n\t/**\r\n\t * 编译模板\r\n\t * @param srcStr \t源串\r\n\t */\r\n\tprivate compileTemplate(srcStr: string) {\r\n\t\twhile (srcStr.length !== 0) {\r\n\t\t\tif (srcStr.startsWith('<')) {\r\n\t\t\t\t// 标签\r\n\t\t\t\tif (srcStr[1] == '/') {\r\n\t\t\t\t\t// 结束标签\r\n\t\t\t\t\tsrcStr = this.compileEndTag(srcStr)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 开始标签\r\n\t\t\t\t\tsrcStr = this.compileStartTag(srcStr)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// 文本节点\r\n\t\t\t\tsrcStr = this.compileText(srcStr)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 处理开始标签\r\n\t * @param srcStr 待编译字符串\r\n\t * @returns 编译处理后的字符串\r\n\t */\r\n\tprivate compileStartTag(srcStr: string): string {\r\n\t\t// 抓取<div\r\n\t\tconst match = /^<\\s*([a-z][^\\s\\/\\>]*)/i.exec(srcStr)\r\n\t\t// 抓取成功\r\n\t\tif (match) {\r\n\t\t\t// 设置当前正在编译的节点\r\n\t\t\tconst dom = new VirtualDom(\r\n\t\t\t\tmatch[1].toLowerCase(),\r\n\t\t\t\tthis.genKey(),\r\n\t\t\t\tthis.module\r\n\t\t\t)\r\n\t\t\tif(dom.tagName === 'svg'){\r\n\t\t\t\tthis.isSvg = true;\r\n\t\t\t}\r\n\t\t\t//设置svg标志\r\n\t\t\tdom.isSvg = this.isSvg;\r\n\r\n\t\t\tif(!this.root){\r\n\t\t\t\tthis.root = dom;\r\n\t\t\t}\r\n\t\t\tif(this.current){\r\n\t\t\t\tthis.current.add(dom)\r\n\t\t\t}\r\n\t\t\t//设置当前节点\r\n\t\t\tthis.current = dom\r\n\t\t\t// 当前节点入栈\r\n\t\t\tthis.domArr.push(dom)\r\n\t\t\t// 截断字符串 准备处理属性\r\n\t\t\tsrcStr = srcStr.substring(match.index + match[0].length).trimStart()\r\n\t\t} else {\r\n\t\t\t// <!-- 或者<后跟符号不是字符\r\n\t\t\t// 当作text节点\r\n\t\t\tthis.textArr.push(srcStr[0])\r\n\t\t\treturn srcStr.substring(1)\r\n\t\t}\r\n\r\n\t\t// 处理属性\r\n\t\tsrcStr = this.compileAttributes(srcStr)\r\n\t\t// 属性处理完成之后 判断是否结束\r\n\t\tif (srcStr.startsWith('>')) {\r\n\t\t\tif (this.isVoidTab(this.current)) {  //属于自闭合，则处理闭合\r\n\t\t\t\tthis.handleCloseTag(this.current,true)\r\n\t\t\t}\r\n\t\t\treturn srcStr.substring(1).trimStart()\r\n\t\t}\r\n\t\treturn srcStr;\r\n\t}\r\n\r\n\t/**\r\n\t * 处理标签属性\r\n\t * @param srcStr 待编译字符串\r\n\t * @returns 编译后字符串\r\n\t */\r\n\tprivate compileAttributes(srcStr: string): string {\r\n\t\twhile (srcStr.length !== 0 && srcStr[0]!=='>') {\r\n\t\t\t// 抓取形如： /> a='b' a={{b}} a=\"b\" a=`b` a $data={{***}} a={{***}}的属性串;\r\n\t\t\tconst match = /^((\\/\\>)|\\$?[a-z_][\\w-]*)(?:\\s*=\\s*((?:'[^']*')|(?:\"[^\"]*\")|(?:`[^`]*`)|(?:{{[^}}]*}})))?/i.exec(srcStr)\r\n\t\t\t// 抓取成功 处理属性\r\n\t\t\tif (match) {\r\n\t\t\t\tif (match[0] === '/>') {  //自闭合标签结束则退出\r\n\t\t\t\t\t// 是自闭合标签\r\n\t\t\t\t\tthis.handleCloseTag(this.current,true);\r\n\t\t\t\t\tsrcStr = srcStr.substring(match.index + match[0].length).trimStart()\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else { //属性\r\n\t\t\t\t\tlet name = match[1][0]!=='$'?match[1].toLowerCase():match[1];\r\n\t\t\t\t\t// 是普通属性\r\n\t\t\t\t\tlet value: any = !match[3]\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: match[3].startsWith(`\"`)\r\n\t\t\t\t\t\t? match[3].substring(1, match[3].length - 1)\r\n\t\t\t\t\t\t: match[3].startsWith(`'`)\r\n\t\t\t\t\t\t? match[3].substring(1, match[3].length - 1)\r\n\t\t\t\t\t\t: match[3]\r\n\t\t\t\t\tif (value && value.startsWith('{{')) {\r\n\t\t\t\t\t\tvalue = new Expression(value.substring(2, value.length - 2))\r\n\t\t\t\t\t\t//表达式 staticNum为-1\r\n\t\t\t\t\t\tthis.current.staticNum = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (name.startsWith('x-')) {\r\n\t\t\t\t\t\t// 指令\r\n\t\t\t\t\t\tthis.current.addDirective(new Directive(name.substring(2), value,this.module.id))\r\n\t\t\t\t\t} else if (name.startsWith('e-')) {\r\n\t\t\t\t\t\t// 事件\r\n\t\t\t\t\t\tthis.current.addEvent(\r\n\t\t\t\t\t\t\tnew NEvent(this.module, name.substring(2), value)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//普通属性\r\n\t\t\t\t\t\tthis.current.setProp(name, value)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsrcStr = srcStr.substring(match.index + match[0].length).trimStart()\r\n\t\t\t} else {\r\n\t\t\t\tif (this.current) {\r\n\t\t\t\t\tthrow new NError('tagError', this.current.tagName)\r\n\t\t\t\t}\r\n\t\t\t\tthrow new NError('wrongTemplate')\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn srcStr\r\n\t}\r\n\r\n\t/**\r\n\t * 编译结束标签\r\n\t * @param srcStr \t源串\r\n\t * @returns \t\t剩余的串\r\n\t */\r\n\tprivate compileEndTag(srcStr: string): string {\r\n\t\t// 抓取结束标签\r\n\t\tconst match = /^<\\/\\s*([a-z][^\\>]*)/i.exec(srcStr)\r\n\t\tif(match){\r\n\t\t\tconst name = match[1].toLowerCase().trim();\r\n\t\t\t//如果找不到匹配的标签头则丢弃\r\n\t\t\tconst index = (<any>this.domArr).findLastIndex((item)=>item.tagName === name);\r\n\t\t\t//关闭\r\n\t\t\tthis.forceClose(index);\r\n\t\t\treturn srcStr.substring(match.index + match[0].length + 1)\r\n\t\t}\r\n\t\treturn srcStr;\r\n\t}\r\n\r\n\t/**\r\n\t * 强制闭合\r\n\t * @param index 在domArr中的索引号\r\n\t * @returns \r\n\t */\r\n\tprivate forceClose(index){\r\n\t\tif(index===-1 || index > this.domArr.length-1){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i=this.domArr.length-1;i>=index;i--){\r\n\t\t\tthis.handleCloseTag(this.domArr[i])\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * 编译text\r\n\t * @param srcStr \t源串\r\n\t * @returns \t\t\r\n\t */\r\n\tprivate compileText(srcStr: string): string {\r\n\t\t// 字符串最开始变为< 或者字符串消耗完 则退出循环\r\n\t\twhile (!srcStr.startsWith('<') && srcStr.length !== 0) {\r\n\t\t\tif (srcStr.startsWith('{')) {\r\n\t\t\t\t// 可能是表达式\r\n\t\t\t\tconst matchExp = /^{{([\\s\\S]*?)}}/i.exec(srcStr)\r\n\t\t\t\tif (matchExp) {\r\n\t\t\t\t\t// 抓取成功\r\n\t\t\t\t\tthis.textArr.push(new Expression(matchExp[1]))\r\n\t\t\t\t\tthis.isExprText = true\r\n\t\t\t\t\tsrcStr = srcStr.substring(matchExp.index + matchExp[0].length)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 跳过单独的{\r\n\t\t\t\t\ttypeof this.textArr[this.textArr.length] === 'string'\r\n\t\t\t\t\t\t? (this.textArr[this.textArr.length] += '{')\r\n\t\t\t\t\t\t: this.textArr.push('{')\r\n\t\t\t\t\tsrcStr = srcStr.substring(1)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// 非表达式，处理成普通字符节点\r\n\t\t\t\tconst match = /([^\\<\\{]*)/.exec(srcStr)\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tlet txt: string\r\n\t\t\t\t\tif (this.current && this.current.tagName === 'pre') {\r\n\t\t\t\t\t\t// 在pre标签里\r\n\t\t\t\t\t\ttxt = this.preHandleText(\r\n\t\t\t\t\t\t\tsrcStr.substring(0, match.index + match[0].length)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttxt = this.preHandleText(\r\n\t\t\t\t\t\t\tsrcStr.substring(0, match.index + match[0].length).trim()\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(txt !== ''){\r\n\t\t\t\t\t\tthis.textArr.push(txt)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsrcStr = srcStr.substring(match.index + match[0].length)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 最开始是< 或者字符消耗完毕 退出循环\r\n\t\tlet text = new VirtualDom(undefined, this.genKey())\r\n\t\tif(this.isExprText){\r\n\t\t\ttext.expressions = [...this.textArr];\r\n\t\t\t//动态文本节点，staticNum=-1\r\n\t\t\ttext.staticNum = -1;\r\n\t\t}else{\r\n\t\t\ttext.textContent = this.textArr.join('')\r\n\t\t}\r\n\t\tif (this.current && (this.isExprText || text.textContent.length !== 0)) {\r\n\t\t\tthis.current.add(text)\r\n\t\t} \r\n\t\t// 重置状态\r\n\t\tthis.isExprText = false\r\n\t\tthis.textArr = []\r\n\t\t// 返回字符串\r\n\t\treturn srcStr\r\n\t}\r\n\r\n\t/**\r\n\t * 预处理html保留字符 如 &nbsp;,&lt;等\r\n\t * @param str   待处理的字符串\r\n\t * @returns     解析之后的串\r\n\t */\r\n\tprivate preHandleText(str: string): string {\r\n\t\tlet reg = /&[a-z]+;/\r\n\t\tif (reg.test(str)) {\r\n\t\t\tlet div = document.createElement('div')\r\n\t\t\tdiv.innerHTML = str\r\n\t\t\treturn div.textContent\r\n\t\t}\r\n\t\treturn str\r\n\t}\r\n\r\n\t/**\r\n\t * 处理当前节点是模块或者自定义节点\r\n\t * @param dom \t虚拟dom节点\r\n\t */\r\n\tprivate postHandleNode(dom:VirtualDom) {\r\n\t\tlet clazz = DefineElementManager.get(dom.tagName)\r\n\t\tif (clazz) {\r\n\t\t\tReflect.construct(clazz, [dom, this.module])\r\n\t\t}\r\n\t\t// 是否是模块类\r\n\t\tif (ModuleFactory.hasClass(dom.tagName)) {\r\n\t\t\tdom.addDirective(new Directive('module', dom.tagName,this.module.id))\r\n\t\t\tdom.tagName = 'div'\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 处理插槽\r\n\t * @param dom \t虚拟dom节点\r\n\t */\r\n\tprivate handleSlot(dom:VirtualDom) {\r\n\t\tif (\r\n\t\t\t!dom.children ||\r\n\t\t\tdom.children.length === 0 ||\r\n\t\t\t!dom.hasDirective('module')\r\n\t\t) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet slotCt: VirtualDom\r\n\t\tfor (let j = 0; j < dom.children.length; j++) {\r\n\t\t\tlet c = dom.children[j]\r\n\t\t\tif (c.hasDirective('slot')) {\r\n\t\t\t\t//带slot的不处理\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!slotCt) { //初始化default slot container\r\n\t\t\t\t//第一个直接被slotCt替换\r\n\t\t\t\tslotCt = new VirtualDom('div', this.genKey())\r\n\t\t\t\tslotCt.addDirective(new Directive('slot','default',this.module.id))\r\n\t\t\t\t//当前位置，用slot替代\r\n\t\t\t\tdom.children.splice(j, 1, slotCt)\r\n\t\t\t} else { \t\t//添加到default slot container\r\n\t\t\t\t//直接删除\r\n\t\t\t\tdom.children.splice(j--, 1)\r\n\t\t\t}\r\n\t\t\tslotCt.add(c)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 标签闭合\r\n\t */\r\n\tprivate handleCloseTag(dom:VirtualDom,isSelfClose?:boolean) {\r\n\t\tthis.postHandleNode(dom)\r\n\t\tdom.sortDirective()\r\n\t\tif(!isSelfClose){\r\n\t\t\tthis.handleSlot(dom)\r\n\t\t}\r\n\t\t//闭合节点出栈\r\n\t\tthis.domArr.pop();\r\n\t\t//设置current为最后一个节点\r\n\t\tif(this.domArr.length>0){\r\n\t\t\tthis.current = this.domArr[this.domArr.length-1];\r\n\t\t}\r\n\t\t// 取消isSvg标识\r\n\t\tif(dom.tagName === 'svg'){\r\n\t\t\tthis.isSvg = false;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * 判断节点是否为空节点\r\n\t * @param dom\t带检测节点\r\n\t * @returns\r\n\t */\r\n\tprivate isVoidTab(dom: VirtualDom) {\r\n\t\treturn voidTagMap.has(dom.tagName)\r\n\t}\r\n}","import { IRenderedDom } from \"./types\";\n/**\n * 比较器\n */\nexport class DiffTool{\n    /**\n     * 比较节点\n     * @param src           待比较节点（新树节点）\n     * @param dst \t        被比较节点 (旧树节点)\n     * @param changeArr     增删改的节点数组\n     * @returns\t            [[type(add 1, upd 2,move 3 ,rep 4,del 5),dom(操作节点),dom1(被替换或修改节点),parent(父节点),loc(位置)]]\n     */\n    public static compare(src:IRenderedDom,dst:IRenderedDom):any[] {\n        const changeArr = [];\n        compare(src,dst);\n        return changeArr;\n\n        /**\n         * 比较节点\n         * @param src           待比较节点（新树节点）\n         * @param dst \t        被比较节点 (旧树节点)\n         * @returns\t            [[type(add 1, upd 2,del 3,move 4 ,rep 5),dom(操作节点),dom1(被替换或修改节点),parent(父节点),\n         *                       loc(dom在父的children index)]]\n         */\n        function compare(src:IRenderedDom,dst:IRenderedDom) {\n            if (!src.tagName) { //文本节点\n                if (!dst.tagName) {\n                    if ((src.staticNum || dst.staticNum) && src.textContent !== dst.textContent) {\n                        addChange(2,src,null,dst.parent);\n                    }else if(src.moduleId !== dst.moduleId){\n                        addChange(5,src,dst, dst.parent);\n                    }\n                } else { //节点类型不同，替换\n                    addChange(5,src,dst, dst.parent);\n                }\n            } else {\n                //节点类型不同或对应的子模块不同，替换\n                if (src.tagName !== dst.tagName) { \n                    addChange(5,src,dst, dst.parent);\n                }else{//节点类型相同，但有一个不是静态节点，进行属性比较\n                    if((src.staticNum || dst.staticNum) && isChanged(src,dst)){\n                        addChange(2,src,null,dst.parent);\n                    }\n                    if(!src.moduleId){  //子模块不比较子节点\n                        compareChildren(src,dst);\n                    }\n                }\n            }\n        }\n\n        /**\n         * 比较子节点\n         * @param src   新节点\n         * @param dst   旧节点\n         */\n        function compareChildren(src,dst){\n            //子节点处理\n            if (!src.children || src.children.length === 0) {\n                // 旧节点的子节点全部删除\n                if (dst.children && dst.children.length > 0) {\n                    dst.children.forEach(item => addChange(3,item,null,dst));\n                }\n            } else {\n                //全部新加节点\n                if (!dst.children || dst.children.length === 0) {\n                    src.children.forEach((item,index) => addChange(1, item,null, dst,index));\n                } else { //都有子节点\n                    //存储比较后需要add的key\n                    let addObj={};\n                    //子节点对比策略\n                    let [newStartIdx,newEndIdx,oldStartIdx,oldEndIdx] = [0,src.children.length-1,0,dst.children.length-1];\n                    let [newStartNode,newEndNode,oldStartNode,oldEndNode] = [\n                        src.children[newStartIdx],\n                        src.children[newEndIdx],\n                        dst.children[oldStartIdx],\n                        dst.children[oldEndIdx]\n                    ]\n                    while(newStartIdx <= newEndIdx && oldStartIdx <= oldEndIdx) {\n                        if (oldStartNode.key === newStartNode.key) {  //新前旧前\n                            compare(newStartNode,oldStartNode);\n                            if(newStartIdx !== oldStartIdx){\n                                addChange(4,newStartNode,null,dst,newStartIdx,oldStartIdx);\n                            }\n                            newStartNode = src.children[++newStartIdx];\n                            oldStartNode = dst.children[++oldStartIdx];\n                        } else if (oldEndNode.key === newEndNode.key) { //新后旧后\n                            compare(newEndNode,oldEndNode);\n                            if(oldEndIdx !== newEndIdx){\n                                addChange(4,newEndNode,null,dst,newEndIdx,oldEndIdx);\n                            }\n                            newEndNode = src.children[--newEndIdx];\n                            oldEndNode = dst.children[--oldEndIdx];\n                        } else if (newStartNode.key === oldEndNode.key) { //新前旧后\n                            //新前旧后\n                            compare(newStartNode,oldEndNode);\n                            //放在指定位置\n                            if(newStartIdx !== oldEndIdx){\n                                addChange(4,newStartNode,null,dst,newStartIdx,oldEndIdx);\n                            }\n                            newStartNode = src.children[++newStartIdx];\n                            oldEndNode = dst.children[--oldEndIdx];\n                            \n                        } else if (newEndNode.key === oldStartNode.key) {  //新后旧前\n                            compare(newEndNode,oldStartNode);\n                            if(newEndIdx !== oldStartIdx){\n                                addChange(4, newEndNode, null,dst, newEndIdx,oldStartIdx);\n                            }\n                            newEndNode = src.children[--newEndIdx];\n                            oldStartNode = dst.children[++oldStartIdx];\n                        } else {\n                            //加入到addObj\n                            addObj[newStartNode.key]= addChange(1, newStartNode, null,dst,newStartIdx);\n                            //新前指针后移\n                            newStartNode = src.children[++newStartIdx];\n                        }\n                    }\n\n                    //多余新节点，需要添加\n                    if(newStartIdx<=newEndIdx) {\n                        for (let i = newStartIdx; i <= newEndIdx; i++) {\n                            // 添加到dst.children[i]前面\n                            addChange(1,src.children[i], null ,dst,i);\n                        }\n                    }\n                    \n                    //有多余老节点，需要删除或变成移动\n                    if(oldStartIdx<=oldEndIdx){\n                        for (let i = oldStartIdx,index=i; i <= oldEndIdx; i++,index++) {\n                            let ch=dst.children[i];\n                            //如果要删除的节点在addArr中，则表示move，否则表示删除\n                            if(addObj.hasOwnProperty(ch.key)){ \n                                let o = addObj[ch.key];\n                                if(index !== o[4]){ //修改add为move\n                                    o[0] = 4;\n                                    //设置move前位置\n                                    o[5] = i;\n                                    //从add转为move，需要比较新旧节点\n                                    compare(o[1],ch);\n                                }else{  //删除不需要移动的元素\n                                    let ii;\n                                    if((ii=changeArr.findIndex(item=>item[1].key === o[1].key)) !== -1){\n                                        changeArr.splice(ii,1);\n                                    }\n                                }\n                            }else{\n                                addChange(3,ch,null,dst);\n                                //删除的元素索引号-1，用于判断是否需要移动节点\n                                index--;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        /**\n         * 判断节点是否修改\n         * @parma src   新树节点\n         * @param dst   旧树节点\n         * @returns     true/false\n         */\n        function isChanged(src:IRenderedDom,dst:IRenderedDom):boolean{\n            for(let p of ['props','assets']){\n                //属性比较\n                if(!src[p] && dst[p] || src[p] && !dst[p]){\n                    return true;\n                }else if(src[p] && dst[p]){\n                    let keys = Object.keys(src[p]);\n                    let keys1 = Object.keys(dst[p]);\n                    if(keys.length !== keys1.length){\n                        return true;\n                    }else{\n                        for(let k of keys){\n                            if(src[p][k] !== dst[p][k]){\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        \n        /**\n         * 添加到修改数组\n         * @param type      类型 add 1, upd 2,del 3,move 4 ,rep 5\n         * @param dom       目标节点       \n         * @param dom1      相对节点（被替换）\n         * @param parent    父节点\n         * @param loc       添加或移动的目标index\n         * @param loc1      被移动前位置\n         * @returns         添加的change数组\n        */\n        function addChange(type:number,dom: IRenderedDom, dom1: IRenderedDom,parent?:IRenderedDom,loc?:number,loc1?:number){\n            const o = [type,dom,dom1,parent,loc,loc1];\n            changeArr.push(o);\n            return o;\n        }\n    }\n}\n","import { VirtualDom } from \"./virtualdom\";\nimport { Module } from \"./module\";\n/**\n * 自定义元素\n * 用于扩充定义，主要对ast obj进行前置处理\n */\nexport class DefineElement {\n    /**\n     * 构造器，在dom编译后执行\n     * @param node \n     * @param module \n     */\n    constructor(node:VirtualDom){\n        if (node.hasProp('tag')) {\n            node.tagName = node.getProp('tag');\n            node.delProp('tag');\n        } else {\n            node.tagName = 'div';\n        }\n    }\n}\n","import { NEvent } from \"./event\";\nimport { Module } from \"./module\";\nimport { IRenderedDom } from \"./types\";\n/**\n * 事件管理器\n */\nexport class EventManager {\n    /**\n     * 外部事件集\n     */\n    private static extendEventMap = new Map();\n    \n    /**\n     * 处理外部事件\n     * @param dom       dom节点\n     * @param event     事件对象\n     * @returns         如果有是外部事件，则返回true，否则返回false\n     */\n    public static handleExtendEvent(module:Module,dom:IRenderedDom,event:NEvent):boolean{\n        let evts = this.get(event.name);\n        if (!evts) {\n            return false;\n        }\n        for(let key of Object.keys(evts)){\n            let ev = new NEvent(module,key,evts[key]);\n            ev.capture = event.capture;\n            ev.nopopo = event.nopopo;\n            ev.delg = event.delg;\n            ev.once = event.once;\n            //设置依赖事件\n            ev.dependEvent = event;\n            module.eventFactory.addEvent(dom,ev);\n        }\n        return true;\n    }\n\n    /**\n     * 注册扩展事件\n     * @param eventName    事件名\n     * @param handleObj    事件处理集\n     */\n    public static regist(eventName:string,handleObj:any) {\n        this.extendEventMap.set(eventName,handleObj);\n    }\n \n    /**\n     * 取消注册扩展事件\n     * @param eventName     事件名\n     */\n    public static unregist(eventName:string) {\n        return this.extendEventMap.delete(eventName);\n    }\n\n    /**\n     * 获取扩展事件\n     * @param eventName     事件名\n     * @returns             事件处理集\n     */\n    public static get(eventName:string):any{\n        return this.extendEventMap.get(eventName);\n    }\n}\n","import { ModuleFactory } from \"./modulefactory\";\nimport { NEvent } from \"./event\";\nimport { Module } from \"./module\";\nimport { IRenderedDom } from \"./types\";\n\n/**\n * 事件工厂\n * 每个模块一个事件工厂，用于管理模块内虚拟dom对应的事件对象\n */\nexport class EventFactory{\n    /**\n     * 所属模块\n     */\n    private module:Module;\n    /**\n     * 事件map\n     * key:虚拟domkey，\n     * value: {\n     *          eventName1:\n     *            {\n     *              own:[event对象,...],\n     *              delg:[{key:被代理key,event:event对象},...],\n     *              toDelg:[event对象],\n     *              capture:useCapture\n     *           },\n     *           eventName2:...\n     *           bindMap:{},\n     *        }\n     *    eventName:事件名，如click等\n     *    配置项:\n     *        own:自己的事件数组,\n     *        delg:代理事件数组（代理子对象）,\n     *        bindMap:已绑定事件map，其中键为事件名，值为capture，解绑时需要\n     *        capture:在own和delg都存在时，如果capture为true，则先执行own，再执行delg，为false时则相反。\n     *                如果只有own，则和html event的cature事件处理机制相同\n     */\n    private eventMap:Map<number,any>;\n\n    /**\n     * domkey对应event对象数组\n     * key: dom key\n     * value: NEvent数组\n     */\n    private addedEvents:Map<number,NEvent[]>;\n\n    /**\n     * 构造器\n     * @param module 模块\n     */\n    constructor(module:Module){\n        this.module = module;\n        this.eventMap = new Map();\n        this.addedEvents = new Map();\n    }\n\n    /**\n     * 保存事件\n     * @param key       dom key \n     * @param event     事件对象\n     */\n    public addEvent(dom:IRenderedDom,event: NEvent){\n        const key = dom.key;\n        //判断是否已添加，避免重复添加\n        if(this.addedEvents.has(key) && this.addedEvents.get(key).includes(event)){\n            return;\n        }\n        //代理事件，如果无父节点，则直接处理为自有事件\n        if(event.delg){\n            if(dom.parent){\n                this.addToArr(dom.parent.key,event,dom.key);\n            }else{ //不存在父对象，设置delg为false\n                event.delg = false;\n            }\n        }\n        // 自有事件\n        if(!event.delg){\n            this.addToArr(dom.key,event);\n        }\n        //添加到addedEvents\n        if(!this.addedEvents.has(key)){\n            this.addedEvents.set(key,[event]);\n        }else{\n            this.addedEvents.get(key).push(event);\n        }\n    }\n\n    /**\n     * 添加到dom的own或delg事件队列\n     * @param key       dom key \n     * @param event     事件对象\n     * @param key1      被代理dom key，仅对代理事件有效\n     */\n    private addToArr(key:number,event:NEvent,key1?:number){\n        let cfg;\n        if(!this.eventMap.has(key)){\n            cfg = {bindMap:{}};\n            this.eventMap.set(key,cfg);\n        }else{\n            cfg = this.eventMap.get(key);\n        }\n        if(!cfg[event.name]){\n            cfg[event.name] = { //eventname对应配置不存在\n                delg:[],\n                own:[]\n            }\n        }\n        //类型：delg或own\n        let type;\n        let value;\n        //代理事件\n        if(key1){\n            type = 'delg';\n            value = {key:key1,event:event};\n        }else{ //非代理事件\n            type = 'own';\n            value = event;\n            cfg[event.name].capture = event.capture||false;\n        }\n        cfg[event.name][type].push(value);\n    }\n\n    /**\n     * 获取事件对象\n     * @param key   dom key\n     * @returns     事件对象\n     */\n    public getEvent(key:number):any{\n        return this.eventMap.get(key);\n    }\n\n    /**\n     * 移除所有事件\n     * @param dom \n     */\n    public removeAllEvents(dom:IRenderedDom){\n        if(!this.addedEvents.has(dom.key)){\n            return;\n        }\n        for(let ev of this.addedEvents.get(dom.key)){\n            this.removeEvent(dom,ev);\n        }\n        this.addedEvents.delete(dom.key);\n    }   \n    /**\n     * 删除事件\n     * @param event     事件对象\n     * @param key       对应dom keys\n     */\n    public removeEvent(dom:IRenderedDom,event: NEvent) {\n        if(!this.addedEvents.has(dom.key) || !this.addedEvents.get(dom.key).includes(event)){\n            return;\n        }\n        //从dom event数组移除\n        const arr = this.addedEvents.get(dom.key);\n        arr.splice(arr.indexOf(event),1);\n\n        //处理delg和own数组\n        if(event.delg){ //代理事件\n            //找到父对象\n            if(!dom.parent || !this.eventMap.has(dom.parent.key)){\n                return;\n            }\n            let cfg = this.eventMap.get(dom.parent.key);\n            if(!cfg[event.name]){\n                return;\n            }\n            let obj = cfg[event.name];\n            let index = obj.delg.findIndex(item=>item.key===dom.key && item.event===event);\n            if(index !== -1){\n                obj.delg.splice(index,1);\n                // 解绑事件\n                // if(obj.delg.length===0 && obj.own.length===0){\n                //     this.unbind(dom.parent.key,event.name);\n                // }\n            }\n        }else{ //own\n            let cfg = this.eventMap.get(dom.key);\n            if(!cfg[event.name]){\n                return;\n            }\n            let obj = cfg[event.name];\n            let index = obj.own.findIndex(item=>item===event);\n            if(index !== -1){\n                obj.own.splice(index,1);\n                // 解绑事件\n                // if(obj.delg.length === 0 && obj.own.length===0){\n                //     this.unbind(dom.key,event.name);\n                // }\n            }\n        }\n    }\n\n    /**\n     * 绑定dom事件\n     * @param key   dom key\n     */\n    public bind(key:any){\n        if(!this.eventMap.has(key)){\n            return;\n        }\n        const el = this.module.getElement(key);\n        \n        const cfg = this.eventMap.get(key);\n        for(let key of Object.keys(cfg)){\n            // bindMap 不是事件名\n            if(key === 'bindMap'){\n                continue;\n            }\n            el.addEventListener(key,handler,cfg[key].capture);\n            cfg.bindMap[key] = {handler:handler,capture:cfg[key].capture};\n        }\n        const me = this;\n        function handler(e){\n            me.handler.apply(me,[me.module,e]);\n        }\n    }\n\n    /**\n     * 从eventfactory解绑所有事件\n     * @param key           dom key\n     * @param eventName     事件名\n     */\n    public unbind(key:number,eventName:string){\n        if(!this.eventMap.has(key)){\n            return;\n        }\n        const eobj = this.eventMap.get(key);\n        if(!eobj.bindMap || !eobj[eventName]){\n            return;\n        }\n        const el = this.module.getElement(key);\n        const cfg = eobj.bindMap[eventName];\n        //从html element解绑\n        if(el && cfg){\n            el.removeEventListener(eventName,cfg.handler,cfg.capture);\n        }\n        delete eobj.bindMap[eventName];\n    }\n\n    /**\n     * 解绑html element事件\n     * @param key   dom key\n     */\n    public unbindAll(key:number){\n        if(!this.eventMap.has(key)){\n            return;\n        }\n        const eobj = this.eventMap.get(key);\n        if(!eobj.bindMap){\n            return;\n        }\n        const el = this.module.getElement(key);\n        if(el){\n            for(let key of Object.keys(eobj.bindMap)){\n                const v = eobj.bindMap[key];\n                el.removeEventListener(key,v.handler,v.capture);\n            }\n        }\n        eobj.bindMap = {};\n    }\n\n    /**\n     * 是否拥有key对应的事件对象\n     * @param key   dom key\n     * @returns     如果key对应事件存在，返回true，否则返回false\n     */\n    public hasEvent(key:number):boolean{\n        return this.eventMap.has(key);\n    }\n\n    /**\n     * 清除工厂所有事件\n     */\n    public clear(){\n        //解绑事件\n        for(let key of this.addedEvents.keys()){\n            this.unbindAll(key);\n        }\n        this.addedEvents.clear();\n        this.eventMap.clear();\n    }\n\n    /**\n     * 事件handler\n     * @param module    模块\n     * @param e         HTML Event\n     */\n    \n    private handler(module,e){\n        //从事件element获取事件\n        let el = e.currentTarget;\n        const key = el.key;\n        const dom = module.domManager.getRenderedDom(key);\n        if(!dom){\n            return;\n        }\n        const eobj = this.eventMap.get(key);\n        if(!eobj || !eobj[e.type]){\n            return;\n        }\n        const evts = eobj[e.type];\n        if(evts.capture){ //先执行自己的事件\n            doOwn(evts.own);\n            doDelg(evts.delg);\n        }else{\n            if(!doDelg(evts.delg)){\n                doOwn(evts.own);\n            }\n        }\n    \n        /**\n         * 处理自有事件\n         * @param events \n         * @returns \n         */\n        function doOwn(events){\n            if(!events){\n                return;\n            }\n            //如果为子模块，则model为子模块对应节点的model\n            let nopopo = false;\n            for(let i=0;i<events.length;i++){\n                const ev = events[i];\n                //外部事件且为根dom，表示为父模块外部传递事件，则model为模块srcDom对应model，否则使用dom对应model\n                const model = ev.module!==module&&dom.key===1?module.srcDom.model:dom.model;\n                //判断为方法名还是函数\n                if(typeof ev.handler === 'string'){\n                    ev.module.invokeMethod(ev.handler,model,dom,ev,e);\n                }else if(typeof ev.handler === 'function'){\n                    ev.handler.apply(module,[model,dom,ev,e]);\n                }\n                if(ev.once){  //移除事件\n                    events.splice(i--,1);\n                }\n                nopopo = ev.nopopo;\n            }\n            if(nopopo){\n                e.stopPropagation();\n            }\n        }\n\n        /**\n         * 处理代理事件\n         * @param events \n         * @returns         是否禁止冒泡\n         */\n        function doDelg(events):boolean{\n            if(!events){\n                return false;\n            }\n            const elArr = e.path || (e.composedPath?e.composedPath():[]);\n            let nopopo = false;\n            for(let i=0;i<events.length;i++){\n                const evo = events[i];\n                const ev = evo.event;\n                for(let j=0;j<elArr.length && elArr[j]!==el;j++){\n                    const k = elArr[j].key;\n                    if(k === evo.key){\n                        const dom1 = dom.children.find(item=>item.key===k);\n                        if(!dom1){\n                            continue;\n                        }\n                        //外部事件且为根dom，表示为父模块外部传递事件，则model为模块srcDom对应model，否则使用dom对应model\n                        const model = ev.module!==module&&dom1.key===1?module.srcDom.model:dom1.model;\n                        if(typeof ev.handler === 'string'){\n                            ev.module.invokeMethod(ev.handler,model,dom1,ev, e);\n                        }else if(typeof ev.handler === 'function'){\n                            ev.handler.apply(ev.module,model,dom1,ev,e);\n                        }\n                        // 保留nopopo\n                        nopopo = ev.nopopo;\n                        if(ev.once){  //移除代理事件，需要从被代理元素删除\n                            //从当前dom删除\n                            events.splice(i--,1);\n                            //从被代理dom删除\n                            const ind = module.eventFactory.get(k).indexOf(ev);\n                            module.eventFactory.get(k).splice(ind,1);\n                        }\n                        break;\n                    }\n                }\n            }\n            return nopopo;\n        }\n    }\n}","import { Module } from \"./module\";\n\n/**\n * NCache模块-存储在内存中\n */\nexport class NCache{\n    private cacheData:any;\n    /**\n     * 订阅map，格式为 {key:[{module:订阅模块,handler:},...]}\n     */\n    private subscribeMap = new Map();\n    \n    constructor(){\n        this.cacheData = {};\n    }\n\n    /**\n     * 通过提供的键名从内存中拿到对应的值\n     * @param key   键，支持\".\"（多级数据分割）\n     * @reutrns     值或undefined\n     */\n    public get(key:string){\n        let p = this.cacheData;\n        if(key.indexOf('.') !== -1){\n            let arr = key.split('.');\n            if(arr.length>1){\n                for(let i=0;i<arr.length-1 && p;i++){\n                    p = p[arr[i]];\n                }\n                if(p){\n                    key = arr[arr.length-1];\n                }\n            }\n        }\n        if(p){\n            return p[key];\n        }\n    }\n\n    /**\n     * 通过提供的键名和值将其存储在内存中\n     * @param key       键 \n     * @param value     值\n     */\n    public set(key:string,value:any){\n        let p = this.cacheData;\n        let key1 = key;\n        if(key.indexOf('.') !== -1){\n            let arr = key.split('.');\n            if(arr.length>1){\n                for(let i=0;i<arr.length-1;i++){\n                    if(!p[arr[i]] || typeof p[arr[i]] !== 'object'){\n                        p[arr[i]] = {};\n                    }\n                    p = p[arr[i]];        \n                }\n                key = arr[arr.length-1];\n            }\n        }\n        \n        if(p){\n            p[key] = value;\n        }\n\n        //处理订阅\n        if(this.subscribeMap.has(key1)){\n            let arr = this.subscribeMap.get(key1);\n            for(let a of arr){\n                this.invokeSubscribe(a.module,a.handler,value);\n            }\n        }\n    }\n\n    /**\n     * 通过提供的键名将其移除\n     * @param key   键 \n     */\n    public remove(key:string){\n        let p = this.cacheData;\n        if(key.indexOf('.') !== -1){\n            let arr = key.split('.');\n            if(arr.length>1){\n                for(let i=0;i<arr.length-1 && p;i++){\n                    p = p[arr[i]];\n                }\n                if(p){\n                    key = arr[arr.length-1];\n                }\n            }\n        }\n        \n        if(p){\n            delete p[key];\n        }       \n    }\n    /**\n     * 订阅\n     * @param module    订阅的模块\n     * @param key       字段key\n     * @param handler   回调函数 参数为key对应value \n     */\n    public subscribe(module:Module,key:string,handler:Function|string){\n        if(!this.subscribeMap.has(key)){\n            this.subscribeMap.set(key,[{module:module,handler:handler}]);\n        }else{\n            let arr = this.subscribeMap.get(key);\n            if(!arr.find(item=>item.module === module && item.handler === handler)){\n                arr.push({module:module,handler:handler});\n            }\n        }\n        //如果存在值，则执行订阅回调\n        let v = this.get(key);\n        if(v){\n            this.invokeSubscribe(module,handler,v);\n        }\n    }\n\n    /**\n     * 调用订阅方法\n     * @param module    模块\n     * @param foo       方法或方法名\n     * @param v         值\n     */\n    private invokeSubscribe(module:Module,foo:Function|string,v:any){\n        if(typeof foo === 'string'){\n            module.invokeMethod(<string>foo,v);\n        }else{\n            foo.call(module,v);\n        }\n    }\n}","import { NCache } from \"./cache\";\nimport { Module } from \"./module\";\n\n/**\n * 全局缓存\n */\nexport class GlobalCache{\n    //NCache实例\n    private static cache:NCache = new NCache();\n\n    /**\n     * 保存到cache\n     * @param key       键，支持\".\"（多级数据分割）\n     * @param value     值\n     */\n    public static set(key:string,value:any){\n        this.cache.set(key,value);\n    }\n\n    /**\n     * 从cache读取\n     * @param key   键，支持\".\"（多级数据分割）\n     * @returns     缓存的值或undefined\n     */\n    public static get(key){\n        return this.cache.get(key);\n    }\n\n    /**\n     * 订阅\n     * @param module    订阅的模块\n     * @param key       字段key\n     * @param handler   回调函数 参数为key对应value\n     */\n    public static subscribe(module:Module,key:string,handler:Function){\n        this.cache.subscribe(module,key,handler);\n    }\n\n    /**\n     * 从cache移除\n     * @param key   键，支持\".\"（多级数据分割）\n     */\n    public static remove(key){\n        this.cache.remove(key);\n    }\n\n}","import { Module } from \"./module\";\n/**\n * 模型类\n * 对数据做代理\n * 注意:以下5个属性名不能用\n *      __source:源数据对象\n *      __key:模型的key\n *      __module:所属模块\n *      __parent:父模型\n *      __name:在父对象中的属性名\n */\nexport class Model {\n    /**\n     * @param data \t\t数据\n     * @param module \t模块对象\n     * @param parent    父模型\n     * @param name      模型在父对象中的prop name\n     * @returns         模型代理对象\n     */\n    constructor(data: any, module: Module, parent?:any, name?:any) {\n        //数据不存在或已经代理，无需再创建\n        if(!data || data.__source){\n            return;\n        }\n        \n        // 创建模型\n        let proxy = new Proxy(data, {\n            set(src: any, key: string, value: any, receiver: any){\n                let value1 = value;\n                //proxy转换为源对象，否则比较会出错\n                if(value && value.__source){\n                    const source = value.__source;\n                    // 已经被代理，但是可能没添加当前module\n                    if(source){\n                        //可能父传子，需要添加引用\n                        if(value.__module !== module){\n                            module.modelManager.add(source,value);\n                            value.__module.modelManager.bindModel(value,module);\n                            //保存value在本模块中的属性名\n                            module.modelManager.setModelName(value,key);\n                        }\n                        value1 = source;\n                    }\n                }\n                //值未变,proxy 不处理\n                if (src[key] === value1) {\n                    return true;\n                }\n                let ov = src[key];\n                let r = Reflect.set(src, key, value1, receiver);\n                module.modelManager.update(receiver, key, ov, value);\n                return r;\n            },\n            get(src: any, key: string | symbol, receiver){\n                //如果为代理，则返回源数据\n                if(key === '__source'){\n                    return receiver?src:undefined;\n                }\n                //如果为代理，则返回module\n                if(key === '__module'){\n                    return receiver?module:undefined;\n                }\n                //如果为代理，则返回key\n                if(key === '__key'){\n                    return receiver?module.modelManager.getModelKey(src):undefined;\n                }\n                //父模型\n                if(key === '__parent'){\n                    return parent;\n                }\n\n                if(key === '__name'){\n                    return name;\n                }\n\n                let res = Reflect.get(src, key, receiver);\n                //只处理object和array\n                if(res && (res.constructor === Object || res.constructor === Array)){\n                    let m = module.modelManager.getModel(res);\n                    if(!m){\n                        m = new Model(res,module,receiver,key);\n                    }\n                    res = m;\n                }\n                return res;\n            },\n            deleteProperty(src: any, key: any){\n                let oldValue = src[key];\n                delete src[key];\n                module.modelManager.update(proxy,key,oldValue,undefined);\n                return true;\n            }\n        });\n        module.modelManager.add(data,proxy);\n        return proxy;\n    }\n}","import { ModuleFactory } from \"./modulefactory\";\nimport { Model } from \"./model\";\nimport { Module } from \"./module\";\nimport { Renderer } from \"./renderer\";\nimport { Util } from \"./util\";\n\n/**\n * 模型工厂\n */\nexport class ModelManager {\n    /**\n     * 所属模块\n     */\n    public module:Module;\n\n    /**\n     * 数据map\n     * {data:{model:model,key:key}\n     * 其中：\n     *      data:       初始数据对象\n     *      model:      model对象\n     */\n    private dataMap: WeakMap<object,any> = new WeakMap();\n\n    /**\n     * 存储模型对应属性名，如果为父传子，则需要保存属于该模型的属性名\n     * key: model\n     * value: model名字\n     */\n    private nameMap:WeakMap<object,any> = new WeakMap();\n    /** \n     * model对应监听器map \n     *  key:model\n     *  value:{key1:{f:foo1,deep:true/false},key2:,...}\n     *        其中：prop为被监听属性，foo为监听器方法，deep为是否深度监听\n     */\n    private watchMap:WeakMap<object,any> = new WeakMap();\n\n    /**\n     * 是否存在深度watcher\n     */\n    private hasDeepWatch:boolean = false;\n\n    /**\n     * 绑定module map，slot引用外部数据时有效\n     * {model:[moduleid1,moduleid2,...]}\n     */\n    public bindMap:WeakMap<object,number[]> = new WeakMap();\n\n    \n    /**\n     * 构造器\n     * @param module    模块\n     */\n    constructor(module:Module){\n        this.module = module;\n    }\n\n    /**\n     * 获取model，不存在则新建\n     * @param data      数据\n     * @returns         model\n     */\n    public getModel(data:any):Model{\n        return this.dataMap.has(data)?this.dataMap.get(data).model:undefined;\n    }\n\n    /**\n     * 获取model key\n     * @param model     model对象\n     * @returns         model对应key\n     */\n    public getModelKey(data:any):number{\n        return this.dataMap.has(data)?this.dataMap.get(data).key:undefined;\n    }\n\n    /**\n     * 设置模型名\n     * @param model 模型 \n     * @param name  名\n     */\n    public setModelName(model:any,name:string){\n        if(!this.nameMap.has(model)){\n            this.nameMap.set(model,name);\n        }\n    }    \n\n    /**\n     * 获取模型名\n     * @param model 模型 \n     * @returns     模型名\n     */\n    public getModelName(model:any):string{\n        return this.nameMap.get(model);\n    }\n\n    /**\n     * 添加数据到map\n     * @param data      原始数据\n     * @param model     模型\n     */\n    public add(data,model){\n        //避免重复添加\n        if(this.dataMap.has(data)){\n            return;\n        }\n        this.dataMap.set(data,{model:model,key:model.__key || Util.genId()});\n    }\n    \n    /**\n     * 添加绑定\n     * @param model     模型 \n     * @param moduleId  模块id\n     */\n    public bindModel(model:any,module:Module){\n        if(!model){\n            return;\n        }\n        bind(this.bindMap,model,module);\n        /**\n         * 绑定\n         * @param bindMap \n         * @param model \n         * @param module \n         */\n        function bind(bindMap,model,module){\n            if(model.__module === module){\n                return;\n            }\n            let mids;\n            if(!bindMap.has(model)){\n                mids = [];\n                bindMap.set(model,mids);\n            }else{\n                mids = bindMap.get(model);\n            }\n            if(!mids.includes(module.id)){\n                mids.push(module.id);\n            }\n            //级联绑定\n            for(let key of Object.keys(model)){\n                if(model[key] && typeof model[key] === 'object'){\n                    bind(bindMap,model[key],module);\n                }\n            }\n        }\n    }\n\n    /**\n     * 更新导致渲染\n     * 如果不设置oldValue和newValue，则直接强制渲染\n     * @param model     model\n     * @param key       属性\n     * @param oldValue  旧值\n     * @param newValue  新值\n     */\n    public update(model: Model, key: string, oldValue?: any, newValue?: any) {\n        //处理watch\n        handleWatcher(this.module,model);\n        //添加module渲染\n        Renderer.add(this.module);\n        //对绑定模块添加渲染\n        if(this.bindMap.has(model)){\n            for(let id of this.bindMap.get(model)){\n                const m = ModuleFactory.get(id);\n                if(m){\n                    handleWatcher(m,model);\n                    Renderer.add(m);\n                }\n            }\n        }\n        \n        /**\n         * 处理watcher\n         * @param mdl   模块\n         * @param model 模型\n         */  \n        function handleWatcher(mdl,model){\n            const map = mdl.modelManager.watchMap;\n            let watcher = map.get(model);\n            //当前model存在watcher\n            if(watcher && watcher[key]){\n                //查找对应key是否存在watch\n                watcher[key].f.call(mdl,model,key,oldValue,newValue);\n            }else if(mdl.modelManager.hasDeepWatch){   //进行deep查找\n                for(let m = model;m && m.__parent;m=m.__parent){\n                    //如果已经跨模块，则表示为父传子，父模块指向当前模块\n                    let pm = m.__parent.__module === mdl?m.__parent:mdl.model;\n                    if(!map.has(pm)){\n                        continue;\n                    }\n                    const watcher = map.get(pm);\n                    const name = mdl.modelManager.getModelName(m)||m.__name;\n                    if(watcher && watcher[name]){\n                        let cfg = watcher[name];\n                        // 当前model或父model deep watch\n                        if(cfg.deep){\n                            cfg.f.call(mdl,model,key,oldValue,newValue);\n                            //找到即跳出循环\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 监听某个数据项\n     * 注意：执行此操作时，该数据项必须已经存在，否则监听失败\n     * @param model     带watch的model\n     * @param key       数据项名或数组\n     * @param operate   数据项变化时执行方法\n     * @param module    指定模块，如果指定，则表示该model绑定的所有module都会触发watch事件，在model父(模块)传子(模块)传递的是对象时会导致多个watch出发\n     * @param deep      是否深度观察，如果是深度观察，则子对象更改，也会触发观察事件\n     * \n     * @returns         unwatch函数\n     */\n    public watch(model:Model,key: string|string[], operate: Function,deep?:boolean):Function {\n        if(!operate || typeof operate !== 'function'){\n            return;\n        }\n        const me = this;\n        //设置深度watch标志\n        this.hasDeepWatch = deep;\n        //撤销watch数组，数据项为{m:model,k:监听属性,f:触发方法}\n        let arr = [];\n        if(Array.isArray(key)){\n            for(let k of key){\n                watchOne(model,k,operate);\n            }\n        }else{\n            watchOne(model,key,operate);\n        }\n\n        //返回取消watch函数\n        return ()=>{\n            //避免二次取消\n            if(!Array.isArray(arr)){\n                return;\n            }\n            for(let f of arr){\n                let obj = me.watchMap.get(f.m);\n                if(!obj){\n                    continue;\n                }\n                delete obj[f.k];\n                //已经无监听从watchMap移除\n                if(Object.keys(obj).length === 0){\n                    me.watchMap.delete(f.m);\n                }\n            }\n            //释放arr\n            arr = null;\n        }\n        \n        /**\n         * 监听一个\n         * @param model     当前model  \n         * @param key       监听属性，可以支持多级属性，如果为多级属性，倒数第二级对应数据项必须为对象\n         * @param operate   操作方法\n         * @returns \n         */\n        function watchOne(model:Model,key:string,operate:Function){\n            if (!model || typeof model !== 'object') {\n                return;\n            }\n            let index;\n            //如果带'.'，则只取最里面那个对象\n            if ((index = key.lastIndexOf('.')) !== -1) {\n                model = me.get(model,key.substring(0, index));\n                key = key.substring(index + 1);\n                if (!model || typeof model !== 'object') {\n                    return;\n                }\n            }\n            \n            if(!me.watchMap.has(model)){\n                me.watchMap.set(model,{});\n            }\n            const obj= me.watchMap.get(model);\n            obj[key] = {f:operate,deep:deep};\n            //保存用于撤销watch\n            arr.push({m:model,k:key});\n        }\n    }\n\n    \n    /**\n     * 查询model子属性\n     * @param key       属性名，可以分级，如 name.firstName\n     * @param model     模型\n     * @returns         属性对应model proxy\n     */\n    public get(model:Model, key?: string):any {\n        if(key){\n            if (key.indexOf('.') !== -1) {    //层级字段\n                let arr = key.split('.');\n                for (let i = 0; i < arr.length - 1; i++) {\n                    model = model[arr[i]];\n                    if (!model) {\n                        break;\n                    }\n                }\n                if (!model) {\n                    return;\n                }\n                key = arr[arr.length - 1];\n            }\n            model = model[key];\n        }\n        return model;\n    }\n\n    /**\n     * 设置值\n     * @param model     模型\n     * @param key       子属性，可以分级，如 name.firstName\n     * @param value     属性值\n     */\n    public set(model:Model,key:string,value:any){\n        if (key.indexOf('.') !== -1) {    //层级字段\n            let arr = key.split('.');\n            for (let i = 0; i < arr.length - 1; i++) {\n                //不存在，则创建新的model\n                if (!model[arr[i]]) {\n                    model[arr[i]] = {};\n                }\n                model = model[arr[i]];\n            }\n            key = arr[arr.length - 1];\n        }\n        model[key] = value;\n    }\n}","import { NCache } from \"./cache\";\nimport { Directive } from \"./directive\";\nimport { VirtualDom } from \"./virtualdom\";\nimport { NEvent } from \"./event\";\nimport { Expression } from \"./expression\";\nimport { GlobalCache } from \"./globalcache\";\nimport { Module } from \"./module\";\nimport { IRenderedDom } from \"./types\";\n\n/**\n * 指令管理器\n * $directives  指令集\n * $expressions 表达式集\n * $events      事件集\n * $savedoms    dom相关缓存 包括 html dom 和 参数\n * $doms        渲染树\n */\nexport  class ObjectManager {\n    /**\n     * NCache\n     */\n    public cache:NCache;\n\n    /**\n     * 模块\n     */\n    public module:Module;\n\n    /**\n     * module   模块\n     * @param module \n     */\n    constructor(module:Module){\n        this.module = module;\n        this.cache = new NCache();\n    }\n\n    /**\n     * 保存到cache\n     * @param key       键，支持\".\"（多级数据分割）\n     * @param value     值\n     */\n     public set(key:string,value:any){\n        this.cache.set(key+'',value);\n    }\n\n    /**\n     * 从cache读取\n     * @param key   键，支持\".\"（多级数据分割）\n     * @returns     缓存的值或undefined\n     */\n    public get(key:string){\n        return this.cache.get(key);\n    }\n\n    /**\n     * 从cache移除\n     * @param key   键，支持\".\"（多级数据分割）\n     */\n    public remove(key:string){\n        this.cache.remove(key);\n    }\n\n    /**\n     * 设置事件参数\n     * @param id        事件id\n     * @param key       dom key\n     * @param name      参数名  \n     * @param value     参数值\n     */\n    public setEventParam(id:number,key:number,name:string,value:any){\n        this.cache.set('$events.' + id + '.$params.' + key + '.' + name,value);\n    }\n\n    /**\n     * 获取事件参数值\n     * @param id        事件id\n     * @param key       dom key \n     * @param name      参数名\n     * @returns         参数值\n     */\n    public getEventParam(id:number,key:number,name:string){\n        return this.get('$events.' + id + '.$params.' + key + '.' + name);\n    }\n\n    /**\n     * 移除事件参数\n     * @param id        事件id\n     * @param key       dom key\n     * @param name      参数名\n     */\n    public removeEventParam(id:number,key:number,name:string){\n        this.remove('$events.' + id + '.$params.' + key + '.' + name);\n    }\n\n    /**\n     * 清空事件参数\n     * @param id        事件id\n     * @param key       dom key \n     */\n    public clearEventParam(id:number,key?:number){\n        if(key){    //删除对应dom的事件参数\n            this.remove('$events.' + id + '.$params.' + key);    \n        }else{      //删除所有事件参数\n            this.remove('$events.' + id + '.$params');\n        }\n    }\n\n    /**\n     * 设置dom参数值\n     * @param key       dom key \n     * @param name      参数名\n     * @param value     参数值\n     */\n    public setDomParam(key:number,name:string,value:any){\n        this.set('$domparam.' + key + '.' + name ,value);\n    }\n\n    /**\n     * 获取dom参数值\n     * @param key       dom key\n     * @param name      参数名\n     * @returns         参数值\n     */\n    public getDomParam(key:number,name:string):any{\n        return this.get('$domparam.' + key + '.' + name);\n    }\n\n    /**\n     * 移除dom参数值\n     * @param key       dom key\n     * @param name      参数名\n     */\n    public removeDomParam(key:number,name:string){\n        this.remove('$domparam.' + key + '.' + name);\n    }\n\n    /**\n     * 清除element 参数集\n     * @param key   dom key\n     */\n    public clearDomParams(key:number){\n        this.remove('$domparam.' + key);\n    }\n    \n    /**\n     * 清除缓存dom对象集\n     */\n    public clearAllDomParams(){\n        this.remove('$domparam');\n    }\n}\n","import { Model } from \"./model\";\nimport { Route } from \"./route\";\nimport { VirtualDom } from \"./virtualdom\";\n\n/**\n * 应用初始化配置类型\n */\n/**\n * 路由配置\n */\nexport interface IRouteCfg {\n    /**\n     * 路由路径，可以带通配符*，可以带参数 /:\n     */\n    path?: string;\n    \n    /**\n     * 路由对应模块对象或类或模块类名\n     */\n    module?:any;\n\n    /**\n     * 模块路径，当module为类名时需要，默认执行延迟加载\n     */\n    modulePath?:string;\n    /**\n     * 子路由数组\n     */\n    routes?: Array<IRouteCfg>;\n\n    /**\n     * 进入路由事件方法\n     */\n    onEnter?: Function;\n    /**\n     * 离开路由方法\n     */\n    onLeave?: Function;\n    \n    /**\n     * 父路由\n     */\n    parent?: Route;\n}\n\n/**\n * 模块状态类型\n */\nexport enum EModuleState {\n    /**\n     * 已初始化\n     */\n    INIT = 1,\n    /**\n     * 未挂载到html dom\n     */\n    UNMOUNTED = 2,\n    /**\n     * 已挂载到dom树\n     */\n    MOUNTED = 3\n}\n\n/**\n * 渲染后的节点接口\n */\nexport interface IRenderedDom{\n    /**\n     * 元素名，如div\n     */\n    tagName?: string;\n\n    /**\n     * key:string|number,整颗渲染树唯一\n     */\n    key: any;\n \n    /**\n      * 绑定模型\n     */\n    model?: Model;\n\n    /**\n     * 直接属性 不是来自于attribute，而是直接作用于html element，如el.checked,el.value等\n     */\n    assets?: Object;\n\n    /**\n     * 静态属性(attribute)集合\n     * {prop1:value1,...}\n     */\n    props?: Object;\n \n    /**\n     * element为textnode时有效\n     */\n    textContent?: string;\n\n    /**\n     * 子节点数组[]\n     */\n    children?: Array<IRenderedDom>;\n\n    /**\n     * 父虚拟dom\n     */\n    parent?: IRenderedDom;\n\n     /**\n      * staticNum 静态标识数\n      *  0 表示静态，不进行比较\n      *  > 0 每次比较后-1\n      *  < 0 不处理\n      */\n    staticNum?: number;\n \n    /**\n     * 子模块id，模块容器时有效\n     */\n    moduleId?: number;\n\n    /**\n     * 源虚拟dom(vdomTree中的对应节点)\n     */\n    vdom?: VirtualDom;\n\n    /**\n\t * 是否为svg节点\n\t */\n\tisSvg?:boolean;\n}\n\n","import { Module } from \"./module\";\nimport { ModuleFactory } from \"./modulefactory\";\nimport { IRenderedDom } from \"./types\";\nimport { VirtualDom } from \"./virtualdom\";\n\n/**\n * dom 管理器，用于管理模块的虚拟dom，旧渲染树\n */\nexport class DomManager{\n    /**\n     * 所属模块\n     */\n    private module:Module;\n\n    /**\n     * 编译后的虚拟dom树\n     */\n    public vdomTree:VirtualDom;\n\n    /**\n     * 渲染过的树\n     */\n    public renderedTree:IRenderedDom;\n\n    /**\n     *  key:html node映射\n     */\n    public elementMap:Map<number|string,Node> = new Map();\n\n    /**\n     * 构造方法\n     * @param module    所属模块\n     */\n    constructor(module:Module){\n        this.module = module;\n    }\n    /**\n     * 从origin tree 获取虚拟dom节点\n     * @param key   dom key 或 props 键值对\n     * @returns     编译后虚拟节点 \n     */\n    public getOriginDom(key:any):VirtualDom{\n        if(!this.vdomTree){\n            return null;\n        }\n        return find(this.vdomTree);\n        function find(dom:VirtualDom){\n            //对象表示未props查找\n            if(typeof key === 'object'){\n                if(!Object.keys(key).find(k=>key[k] !== dom.props.get(k))){\n                    return dom;\n                }\n            }else if(dom.key === key){ //key查找\n                return dom;\n            }\n            if(dom.children){\n                for(let d of dom.children){\n                    let d1 = find(d);\n                    if(d1){\n                        return d1;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 从渲染树中获取key对应的渲染节点\n     * @param key   dom key或props键值对\n     * @returns     渲染后虚拟节点\n     */\n     public getRenderedDom(key:any):IRenderedDom{\n        if(!this.renderedTree){\n            return;\n        }\n        return find(this.renderedTree,key);\n        /**\n         * 递归查找\n         * @param dom   渲染dom  \n         * @param key   待查找key\n         * @returns     key对应renderdom 或 undefined\n         */\n        function find(dom:IRenderedDom,key:any):IRenderedDom{\n            //对象表示未props查找\n            if(typeof key === 'object'){\n                if(!Object.keys(key).find(k=>key[k] !== dom.props[k])){\n                    return dom;\n                }\n            }else if(dom.key === key){ //key查找\n                return dom;\n            }\n            if(dom.children){\n                for(let d of dom.children){\n                    if(!d){\n                        continue;\n                    }\n                    let d1 = find(d,key);\n                    if(d1){\n                        return d1;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 清除html element map 节点\n     * @param dom   dom节点，如果为空，则清空map\n     */\n    public clearElementMap(dom?:IRenderedDom){\n        if(dom){\n            this.elementMap.delete(dom.key);\n            //带自定义key的移除\n            if(dom.props && dom.props['key']){\n                this.elementMap.delete(dom.props['key']);\n            }\n        }else{\n            this.elementMap.clear();\n        }\n    }\n\n    /**\n     * 获取html node\n     * @param key   dom key 或 props 键值对\n     * @returns     html node\n     */\n    public getElement(key:any):Node{\n        if(typeof key === 'object'){\n            key = this.getRenderedDom(key);\n        }\n        return this.elementMap.get(key);\n    }\n\n    /**\n     * save html node\n     * @param key   dom key\n     * @param node  html node\n     */\n    public saveElement(key:number|string,node:Node){\n        this.elementMap.set(key,node);\n    }\n\n    /**\n     * 释放node\n     * 包括从dom树解挂，释放对应结点资源\n     * @param dom       虚拟dom\n     */\n    public freeNode(dom:IRenderedDom){\n        if(dom.moduleId){  //子模块\n            let m = ModuleFactory.get(dom.moduleId);\n            if(m){\n                m.unmount();\n            }\n        }else{      //普通节点\n            //从map移除\n            this.clearElementMap(dom);\n            //解绑所有事件\n            this.module.eventFactory.unbindAll(dom.key);\n            //子节点递归操作\n            if(dom.children){\n                for(let d of dom.children){\n                    this.freeNode(d);\n                }\n            }\n        }\n    }\n\n    /**\n     * 重置\n     */\n    public reset(){\n        this.renderedTree = null;\n        this.elementMap.clear();\n    }\n}","import { DefineElement } from \"../core/defineelement\";\nimport { DefineElementManager } from \"../core/defineelementmanager\";\nimport { NError } from \"../core/error\";\nimport { NodomMessage } from \"../core/nodom\";\nimport { VirtualDom } from \"../core/virtualdom\";\nimport { Directive } from \"../core/directive\";\nimport { Module } from \"../core/module\";\n\n/**\n * module 元素\n */\nclass MODULE extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //类名\n        let clazz = node.getProp('name');\n        if (!clazz) {\n            throw new NError('itemnotempty', NodomMessage.TipWords['element'], 'MODULE', 'className');\n        }\n        node.delProp('name');\n        node.addDirective(new Directive('module',clazz,module.id));\n    }\n}\n\n/**\n * for 元素\n */\nclass FOR extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //条件\n        let cond = node.getProp('cond');\n        if (!cond) {\n            throw new NError('itemnotempty', NodomMessage.TipWords['element'], 'FOR', 'cond');\n        }\n        node.delProp('cond');\n        node.addDirective(new Directive('repeat',cond,module.id));\n    }\n}\n/**\n * 递归元素\n */\nclass RECUR extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //条件\n        let cond = node.getProp('cond');\n        node.delProp('cond');\n        node.addDirective(new Directive('recur',cond,module.id));\n    }\n}\n\n/**\n * IF 元素\n */\nclass IF extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //条件\n        let cond = node.getProp('cond');\n        if (!cond) {\n            throw new NError('itemnotempty', NodomMessage.TipWords['element'], 'IF', 'cond');\n        }\n        node.delProp('cond');\n        node.addDirective(new Directive('if',cond,module.id));\n    }\n}\n\nclass ELSE extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        node.addDirective(new Directive('else',null,module.id));\n    }\n}\n/**\n * ELSEIF 元素\n */\nclass ELSEIF extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //条件\n        let cond = node.getProp('cond');\n        if (!cond) {\n            throw new NError('itemnotempty', NodomMessage.TipWords['element'], 'ELSEIF', 'cond');\n        }\n        node.delProp('cond');\n        node.addDirective(new Directive('elseif',cond,module.id));\n    }\n}\n/**\n * ENDIF 元素\n */\nclass ENDIF extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        node.addDirective(new Directive('endif',null,module.id));\n    }\n}\n\n/**\n * 替代器\n */\nclass SLOT extends DefineElement{\n    constructor(node: VirtualDom,module:Module){\n        super(node);\n        //条件\n        let cond = node.getProp('name') || 'default';\n        node.delProp('name');\n        node.addDirective(new Directive('slot',cond,module.id));\n    }\n}\n\nDefineElementManager.add([MODULE,FOR,IF,RECUR,ELSE,ELSEIF,ENDIF,SLOT]);","import { NError } from \"../core/error\";\nimport { NEvent } from \"../core/event\";\nimport { GlobalCache } from \"../core/globalcache\";\nimport { Model } from \"../core/model\";\nimport { Module } from \"../core/module\";\nimport { ModuleFactory } from \"../core/modulefactory\";\nimport { Nodom, NodomMessage} from \"../core/nodom\";\nimport { Renderer } from \"../core/renderer\";\nimport { IRenderedDom } from \"../core/types\";\nimport { Util } from \"../core/util\";\n\nexport default (function () {\n    /**\n     * 指令类型初始化\n     * 每个指令类型都有一个名字、处理函数和优先级，处理函数不能用箭头函数\n     * 处理函数在渲染时执行，包含两个参数 module(模块)、dom(目标虚拟dom)、src(源虚拟dom)\n     * 处理函数的this指向指令\n     * 处理函数的返回值 true 表示继续，false 表示后续指令不再执行 \n     */\n\n    /**\n     * module 指令\n     * 用于指定该元素为模块容器，表示子模块\n     * 用法 x-module='模块类名'\n     */\n    Nodom.createDirective(\n        'module',\n        function (module: Module, dom: IRenderedDom) {\n            let m: Module;\n            //存在moduleId，表示已经渲染过，不渲染\n            let mid = module.objectManager.getDomParam(dom.key, 'moduleId');\n            if (mid) {\n                m = ModuleFactory.get(mid);\n            } else {\n                let cls = this.value;\n                m = ModuleFactory.get(cls);\n                if (!m) {\n                    return true;\n                }\n                m.templateModuleId = this.templateModuleId;\n                mid = m.id;\n                //保留modelId\n                module.objectManager.setDomParam(dom.key, 'moduleId', mid);\n                Renderer.getCurrentModule().addChild(m);\n            }\n            //保存到dom上，提升渲染性能\n            dom.moduleId = mid;\n            //变成文本节点，作为子模块占位符，子模块渲染后替换占位符\n            delete dom.tagName;\n            //设置props，如果改变了props，启动渲染\n            let o: any = {};\n            if (dom.props) {\n                for (let p of Object.keys(dom.props)) {\n                    let v = dom.props[p];\n                    if (p[0] === '$') { //数据\n                        if (!o.$data) {\n                            o.$data = {};\n                        }\n                        o.$data[p.substring(1)] = v;\n                        //删除属性\n                        delete dom.props[p];\n                    } else {\n                        o[p] = v;\n                    }\n                }\n            }\n            //传递给模块\n            m.setProps(o, dom);\n            return true;\n        },\n        8\n    );\n\n    /**\n     *  model指令\n     */\n    Nodom.createDirective(\n        'model',\n        function (module: Module, dom: IRenderedDom) {\n            let model: Model = module.get(dom.model,this.value);\n            if (model) {\n                dom.model = model;\n            }\n            return true;\n        },\n        1\n    );\n\n    /**\n     * 指令名 repeat\n     * 描述：重复指令\n     */\n    Nodom.createDirective(\n        'repeat',\n        function (module: Module, dom: IRenderedDom) {\n            let rows = this.value;\n            // 无数据，不渲染\n            if (!Util.isArray(rows) || rows.length === 0) {\n                return false;\n            }\n            const src = dom.vdom;\n            //索引名\n            const idxName = src.getProp('index');\n            const parent = dom.parent;\n            //禁用该指令\n            this.disabled = true;\n            //避免在渲染时对src设置了model，此处需要删除\n            for(let i = 0; i < rows.length; i++) {\n                if(!rows[i]){\n                    continue;\n                }\n                if (idxName) {\n                    rows[i][idxName] = i;\n                }\n                let d = Renderer.renderDom(module, src, rows[i], parent, rows[i].__key);\n                //删除index属性\n                if (idxName) {\n                    delete d.props['index'];\n                }\n            }\n            //启用该指令\n            this.disabled = false;\n            return false;\n        },\n        2\n    );\n\n    /**\n     * 递归指令\n     * 作用：在dom内部递归，用于具有相同数据结构的节点递归生成\n     * 递归指令不允许嵌套\n     * name表示递归名字，必须与内部的recur标签的ref保持一致，名字默认为default\n     * 典型模版\n     * ```\n     * <recur name='r1'>\n     *      <element1>...</element1>\n     *      <element2>...</element2>\n     *      <recur ref='r1' />\n     * </recur>\n     * ```\n     */\n    Nodom.createDirective(\n        'recur',\n        function (module: Module, dom: IRenderedDom) {\n            const src = dom.vdom;\n            //当前节点是递归节点存放容器\n            if (dom.props.hasOwnProperty('ref')) {\n                //如果出现在repeat中，src为单例，需要在使用前清空子节点，避免沿用上次的子节点\n                src.children = [];\n                //递归存储名\n                const name = '$recurs.' + (dom.props['ref'] || 'default');\n                let node = module.objectManager.get(name);\n                if (!node) {\n                    return true;\n                }\n                let model = dom.model;\n                let cond = node.getDirective('recur');\n                let m = model[cond.value];\n                //不存在子层数组，不再递归\n                if (!m) {\n                    return true;\n                }\n                //克隆，后续可以继续用\n                let node1 = node.clone();\n                node1.removeDirective('recur');\n                dom.children ||= [];\n                if (!Array.isArray(m)) {  //非数组recur\n                    Renderer.renderDom(module,node1,m,dom,m.__key);\n                }else{  //数组内recur，依赖repeat得到model，repeat会取一次数组元素，所以需要dom model\n                    Renderer.renderDom(module,node1,model,dom,(<any>m).__key);\n                }\n            } else { //递归节点\n                let data = dom.model[this.value];\n                if (!data) {\n                    return true;\n                }\n                //递归名，默认default\n                const name = '$recurs.' + (dom.props['name'] || 'default');\n                if (!module.objectManager.get(name)) {\n                    module.objectManager.set(name, src);\n                }\n            }\n            return true;\n        },\n        2\n    );\n\n    /**\n     * 指令名 if\n     * 描述：条件指令\n     */\n    Nodom.createDirective('if',\n        function (module: Module, dom: IRenderedDom) {\n            if(!dom.parent){\n                return;\n            }\n            module.objectManager.setDomParam(dom.parent.key, '$if', this.value);\n            return this.value;\n        },\n        5\n    );\n\n    /**\n     * 指令名 else\n     * 描述：else指令\n     */\n    Nodom.createDirective(\n        'else',\n        function (module: Module, dom: IRenderedDom) {\n            if(!dom.parent){\n                return;\n            }\n            return  !module.objectManager.getDomParam(dom.parent.key, '$if');\n        },\n        5\n    );\n\n    /**\n     * elseif 指令\n     */\n    Nodom.createDirective('elseif',\n        function (module: Module, dom: IRenderedDom) {\n            if(!dom.parent){\n                return;\n            }\n            let v = module.objectManager.getDomParam(dom.parent.key, '$if');\n            if (v === true) {\n                return false;\n            } else {\n                if (!this.value) {\n                    return false;\n                } else {\n                    module.objectManager.setDomParam(dom.parent.key, '$if', true);\n                }\n            }\n            return true;\n        },\n        5\n    );\n\n    /**\n     * elseif 指令\n     */\n    Nodom.createDirective(\n        'endif',\n        function (module: Module, dom: IRenderedDom) {\n            if(!dom.parent){\n                return;\n            }\n            module.objectManager.removeDomParam(dom.parent.key, '$if');\n            //endif 不显示\n            return false;\n        },\n        5\n    );\n\n    /**\n     * 指令名 show\n     * 描述：显示指令\n     */\n    Nodom.createDirective(\n        'show',\n        function (module: Module, dom: IRenderedDom) {\n            //show指令参数 {origin:通过style设置的初始display属性,rendered:是否渲染过}\n            let showParam = module.objectManager.getDomParam(dom.key, '$show');\n            //为false且未渲染过，则不渲染\n            if(!this.value && (!showParam || !showParam.rendered)){\n                return false;\n            }\n            if(!showParam){\n                showParam = {};\n                module.objectManager.setDomParam(dom.key, '$show',showParam);\n            }\n            let style = dom.props['style'];\n            const reg =  /display\\s*\\:[\\w\\-]+/;\n            let regResult;\n            let display;\n            if(style){\n                regResult = reg.exec(style);\n                //保存第一个style display属性\n                if(regResult !== null){\n                    let ra = regResult[0].split(':');\n                    display = ra[1].trim();\n                    //保存第一个display属性\n                    if(!showParam.origin && display !== 'none'){\n                        showParam.origin = display;\n                    }\n                }\n            }\n\n            // 渲染标识，value为false且尚未进行渲染，则不渲染\n            if(!this.value){  \n                if(style){\n                    if(display){\n                        //把之前的display替换为none\n                        if(display!=='none'){\n                            style = style.substring(0,regResult.index) + 'display:none' + style.substring(regResult.index + regResult[0].length);\n                        }\n                    }else{\n                        style += ';display:none';\n                    }\n                }else{\n                    style = 'display:none';\n                }\n            }else{\n                //设置渲染标志\n                showParam.rendered = true;\n                if(display === 'none'){\n                    if(style){\n                        if(showParam.origin){\n                            style = style.substring(0,regResult.index) + 'display:' + showParam.origin + style.substring(regResult.index + regResult[0].length);\n                        }else{\n                            style = style.substring(0,regResult.index) + style.substring(regResult.index + regResult[0].length);\n                        }\n                    }\n                }\n            }\n            if(style){\n                dom.props['style'] = style;\n            }\n            return true;\n        },\n        5\n    );\n\n    /**\n     * 指令名 field\n     * 描述：字段指令\n     */\n    Nodom.createDirective('field',\n        function (module: Module, dom: IRenderedDom) {\n            dom.assets ||= {};\n            //修正staticnum\n            if(dom.staticNum === 0){\n                dom.staticNum = 1;\n            }\n            let dataValue = module.get(dom.model,this.value);\n            switch(dom.props['type']){\n                case 'radio':\n                    let value = dom.props['value'];\n                    dom.props['name'] = this.value;\n                    if (dataValue == value) {\n                        dom.props['checked'] = 'checked';\n                        dom.assets['checked'] = true;\n                    } else {\n                        delete dom.props['checked'];\n                        dom.assets['checked'] = false;\n                    }\n                    break;\n                case 'checkbox':\n                    //设置状态和value\n                    let yv = dom.props['yes-value'];\n                    //当前值为yes-value\n                    if (dataValue == yv) {\n                        dom.props['value'] = yv;\n                        dom.assets['checked'] = true;\n                    } else { //当前值为no-value\n                        dom.props['value'] = dom.props['no-value'];\n                        dom.assets['checked'] = false;\n                    }\n                    break;\n                case 'select':\n                    dom.props['value'] = dataValue;\n                    dom.assets['value'] = dataValue;\n                default:\n                    let v = (dataValue !== undefined && dataValue !== null) ? dataValue : '';\n                    dom.props['value'] = v;\n                    dom.assets['value'] = v;\n            }\n            \n            let event: NEvent = GlobalCache.get('$fieldChangeEvent');\n            if (!event) {\n                event = new NEvent(null, 'change',\n                    function (model, dom) {\n                        const el = <any>this.getElement(dom.key);\n                        if (!el) {\n                            return;\n                        }\n                        const directive = dom.vdom.getDirective('field');\n                        const type = dom.props['type'];\n                        let field = directive.value;\n                        let v = el.value;\n                        //根据选中状态设置checkbox的value\n                        if (type === 'checkbox') {\n                            if (dom.props['yes-value'] == v) {\n                                v = dom.props['no-value'];\n                            } else {\n                                v = dom.props['yes-value'];\n                            }\n                        } else if (type === 'radio') {\n                            if (!el.checked) {\n                                v = undefined;\n                            }\n                        }\n                        //修改字段值,需要处理.运算符\n                        let arr = field.split('.')\n                        if (arr.length === 1) {\n                            model[field] = v;\n                        } else {\n                            let temp = model;\n                            field = arr.pop();\n                            for (let i = 0; i < arr.length && temp; i++) {\n                                temp = temp[arr[i]];\n                            }\n                            if (temp) {\n                                temp[field] = v;\n                            }\n                        }\n                    }\n                );\n                //存储字段change事件钩子\n                GlobalCache.set('$fieldChangeEvent', event);\n            }\n            dom.vdom.addEvent(event);\n            return true;\n        },\n        10\n    );\n\n    /**\n     * route指令\n     */\n    Nodom.createDirective('route',\n        function (module: Module, dom: IRenderedDom) {\n            if(!Nodom['$Router']){\n                throw new NError('uninit',NodomMessage.TipWords.route);\n            }\n            //a标签需要设置href\n            if (dom.tagName === 'a') {\n                dom.props['href'] = 'javascript:void(0)';\n            }\n            dom.props['path'] = this.value;\n            //有激活属性\n            if (dom.props['active']) {\n                let acName = dom.props['active'];\n                delete dom.props['active'];\n                //active 转expression\n                const router = Nodom['$Router'];\n                //添加激活model\n                router.addActiveModel(module.id,this.value, dom.model, acName);\n                //路由状态为激活，尝试激活路径\n                if (dom.model[acName]) {\n                    router.activePath(this.value);\n                }\n            }\n            //添加click事件,避免重复创建事件对象，创建后缓存\n            let event: NEvent = GlobalCache.get('$routeClickEvent');\n            if (!event) {\n                event = new NEvent(module, 'click',\n                    function (model, dom, evObj, e) {\n                        let path = dom.props['path'];\n                        if (Util.isEmpty(path)) {\n                            return;\n                        }\n                        Nodom['$Router'].go(path);\n                    }\n                );\n                GlobalCache.set('$routeClickEvent', event);\n            }\n            //为virtual dom添加事件\n            dom.vdom.addEvent(event);\n            return true;\n        },\n        10\n    );\n\n    /**\n     * 增加router指令\n     */\n    Nodom.createDirective('router',\n        function (module: Module, dom: IRenderedDom) {\n            if(!Nodom['$Router']){\n                throw new NError('uninit',NodomMessage.TipWords.route)\n            }\n            //建立新子节点            \n            dom.children = [{key:dom.key+'_r',model:dom.model}];\n            Nodom['$Router'].registRouter(module.id, Renderer.getCurrentModule(),dom);\n            return true;\n        },\n        10\n    );\n\n    /**\n     * 插头指令\n     * 用于模块中，可实现同名替换\n     */\n    Nodom.createDirective('slot',\n        function (module: Module, dom: IRenderedDom) {\n            this.value = this.value || 'default';\n            let mid = dom.parent.moduleId;\n            const src = dom.vdom;\n            const slotName = '$slots.' + this.value;\n            //父dom有module指令，表示为替代节点，替换子模块中的对应的slot节点；否则为子模块定义slot节点\n            if (mid) {\n                let m = ModuleFactory.get(mid);\n                if (m) {\n                    let cfg = m.objectManager.get(slotName);\n                    if(!cfg){\n                        cfg = {};\n                        m.objectManager.set(slotName,cfg);\n                    }\n                    cfg.dom = src;\n                    cfg.model = dom.model;\n                    cfg.module = module;\n                }\n            } else { //源slot节点\n                let cfg = module.objectManager.get(slotName);\n                //内部有slot，但是使用时并未设置slot\n                if(!cfg){\n                    cfg = {type:1};\n                }else if(!cfg.type){\n                    //1 innerrender(通过当前模块渲染），2outerrender(通过模板所属模块渲染)\n                    cfg.type = src.hasProp('innerrender')?1:2;\n                    //首次渲染，需要检测是否绑定父dom model\n                    for (let d of cfg.dom.children) {\n                        if(check(d)){\n                            //设定bind标志\n                            cfg.needBind = true;\n                            break;\n                        }\n                    }\n                    /**\n                     * 检测是否存在节点的statickNum=-1\n                     * @param d     带检测节点\n                     * @returns     true/false\n                     */\n                    function check(d){\n                        if(d.staticNum === -1){\n                            return true;\n                        }\n                        //深度检测\n                        if(d.children){\n                            for(let d1 of d.children){\n                                if(check(d1)){\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n                //渲染时添加s作为后缀，避免与模块内dom key冲突（相同model情况下）\n                if(cfg.dom && cfg.dom.children && cfg.dom.children.length>0){\n                    //渲染时添加s作为后缀，避免与模块内dom key冲突（相同model情况下）\n                    if (cfg.type === 1) { //inner render模式\n                        for (let d of cfg.dom.children) {\n                            Renderer.renderDom(module, d, dom.model, dom.parent, dom.model['__key']+'s');\n                        }\n                    }else { // 外部渲染模式\n                        //绑定数据\n                        if(cfg.needBind){\n                            cfg.module.modelManager.bindModel(cfg.model, module);\n                        }\n                        for (let d of cfg.dom.children) {\n                            Renderer.renderDom(cfg.module, d, cfg.model, dom.parent, cfg.model['__key']+'s');\n                        }\n                    }\n                }\n            }\n            return false;\n        },\n        5\n    );\n}());\n","import { NEvent } from \"../core/event\";\nimport { Module } from \"../core/module\";\nimport { EventManager } from \"../core/eventmanager\";\nimport { IRenderedDom } from \"../core/types\";\n\n/**\n * tap事件\n */\nEventManager.regist('tap',{\n    touchstart(dom:IRenderedDom,module:Module,evtObj:NEvent,e: TouchEvent) {\n        let tch = e.touches[0];\n        evtObj.dependEvent.setParam(module,dom,'pos', { sx: tch.pageX, sy: tch.pageY, t: Date.now() });\n    },\n    touchmove(dom:IRenderedDom,module:Module,evtObj:NEvent,e: TouchEvent) {\n        let pos = evtObj.dependEvent.getParam(module,dom,'pos');\n        if(!pos){\n            return;\n        }\n        let tch = e.touches[0];\n        let dx = tch.pageX - pos.sx;\n        let dy = tch.pageY - pos.sy;\n        //判断是否移动\n        if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n            pos.move = true;\n        }\n    },\n    touchend(dom:IRenderedDom,module:Module,evtObj:NEvent,e: TouchEvent) {\n        let pos = evtObj.dependEvent.getParam(module,dom,'pos');\n        if(!pos){\n            return;\n        }\n        evtObj.dependEvent.removeParam(module,dom,'pos');\n        let dt = Date.now() - pos.t;\n        \n        //点下时间不超过200ms,触发事件\n        if (!pos.move && dt < 200) {\n            let foo = evtObj.dependEvent.handler;\n            if(typeof foo === 'string'){\n                module.invokeMethod(<string>evtObj.dependEvent.handler,dom.model,dom,evtObj.dependEvent,e);\n            }else{\n                foo.apply(module,[dom.model,dom,evtObj.dependEvent,e]);\n            }\n        }\n    }\n});\n\n/**\n * swipe事件\n */\n EventManager.regist('swipe',{\n    touchstart(dom:IRenderedDom,module:Module,evtObj:NEvent,e: TouchEvent){\n        let tch = e.touches[0];\n        let t = Date.now();\n        evtObj.dependEvent.setParam(module,dom,'swipe', {\n            oldTime: [t, t],\n            speedLoc: [{ x: tch.pageX, y: tch.pageY }, { x: tch.pageX, y: tch.pageY }],\n            oldLoc: { x: tch.pageX, y: tch.pageY }\n        });\n    },\n    touchmove(dom:IRenderedDom,module:Module,evtObj:NEvent,e: TouchEvent){\n        let nt = Date.now();\n        let tch = e.touches[0];\n        let mv = evtObj.dependEvent.getParam(module,dom,'swipe');\n        //50ms记录一次\n        if (nt - mv.oldTime[1] > 50) {\n            mv.speedLoc[0] = { x: mv.speedLoc[1].x, y: mv.speedLoc[1].y };\n            mv.speedLoc[1] = { x: tch.pageX, y: tch.pageY };\n            mv.oldTime[0] = mv.oldTime[1];\n            mv.oldTime[1] = nt;\n        }\n        mv.oldLoc = { x: tch.pageX, y: tch.pageY };\n    },\n    touchend(dom:IRenderedDom,module:Module,evtObj:NEvent,e: any){\n        let mv = evtObj.dependEvent.getParam(module,dom,'swipe');\n        let nt = Date.now();\n\n        //取值序号 0 或 1，默认1，如果释放时间与上次事件太短，则取0\n        let ind = (nt - mv.oldTime[1] < 30) ? 0 : 1;\n        let dx = mv.oldLoc.x - mv.speedLoc[ind].x;\n        let dy = mv.oldLoc.y - mv.speedLoc[ind].y;\n        let s = Math.sqrt(dx * dx + dy * dy);\n        let dt = nt - mv.oldTime[ind];\n        //超过300ms 不执行事件\n        if (dt > 300 || s < 10) {\n            return;\n        }\n        let v0 = s / dt;\n        //速度>0.1,触发swipe事件\n        if (v0 > 0.05) {\n            let sname = '';\n            if (dx < 0 && Math.abs(dy / dx) < 1) {\n                e.v0 = v0; //添加附加参数到e\n                sname = 'swipeleft';\n            }\n            if (dx > 0 && Math.abs(dy / dx) < 1) {\n                e.v0 = v0;\n                sname = 'swiperight';\n            }\n            if (dy > 0 && Math.abs(dx / dy) < 1) {\n                e.v0 = v0;\n                sname = 'swipedown';\n            }\n            if (dy < 0 && Math.abs(dx / dy) < 1) {\n                e.v0 = v0;\n                sname = 'swipeup';\n            }\n            //处理swipe\n            if (evtObj.dependEvent.name === sname) {\n                let foo = evtObj.dependEvent.handler;\n                if(typeof foo === 'string'){\n                    module.invokeMethod(foo,dom.model,dom,evtObj.dependEvent, e);\n                }else if(typeof foo === 'function'){\n                    foo.apply(module,[dom.model,dom,evtObj.dependEvent,e]);\n                }\n            }\n        }\n    }\n});\n\n//把swpie注册到4个方向\nEventManager.regist('swipeleft',EventManager.get('swipe'));\nEventManager.regist('swiperight',EventManager.get('swipe'));\nEventManager.regist('swipeup',EventManager.get('swipe'));\nEventManager.regist('swipedown',EventManager.get('swipe'));\n\n/**\n * double click\n */\nEventManager.regist('dblclick',{\n    click(dom:IRenderedDom,module:Module,evtObj:NEvent,e: MouseEvent) {\n        let firstClick = evtObj.dependEvent.getParam(module,dom,'firstClick');\n        if(firstClick){\n            let t = Date.now();\n            //两次点击在300ms内，视为双击\n            if(t - firstClick < 300){\n                let foo = evtObj.dependEvent.handler;\n                if(typeof foo === 'string'){\n                    module.invokeMethod(<string>evtObj.dependEvent.handler,dom.model,dom,evtObj.dependEvent,e);\n                }else{\n                    foo.apply(module,[dom.model,dom,evtObj.dependEvent,e]);\n                }\n            }\n        }else{\n            evtObj.dependEvent.setParam(module,dom,'firstClick', Date.now());\n        }\n        \n        //延迟清理firstClick\n        setTimeout(()=>{\n            evtObj.dependEvent.removeParam(module,dom,'firstClick')\n        },500);\n        \n        \n    },\n    \n});","import { Compiler } from \"./compiler\";\nimport { CssManager } from \"./cssmanager\";\nimport { Model } from \"./model\";\nimport { ModuleFactory } from \"./modulefactory\";\nimport { ObjectManager } from \"./objectmanager\";\nimport { Renderer } from \"./renderer\";\nimport { Util } from \"./util\";\nimport { DiffTool } from \"./difftool\";\nimport { EModuleState, IRenderedDom } from \"./types\";\nimport { EventFactory } from \"./eventfactory\";\nimport { DomManager } from \"./dommanager\";\nimport { ModelManager } from \"./modelmanager\";\nimport { NEvent } from \"./event\";\nimport { Expression } from \"./expression\";\n\n/**\n * 模块类\n * 模块方法说明：模板内使用的方法，包括事件，都直接在模块内定义\n *      方法this：指向module实例\n *      事件参数: model(当前按钮对应model),dom(事件对应虚拟dom),eventObj(事件对象),e(实际触发的html event)\n *      表达式方法：参数按照表达式方式给定即可\n * 模块事件\n *      onInit              初始化后（constructor后，已经有model对象，但是尚未编译，只执行1次）\n *      onBeforeFirstRender 首次渲染前（只执行1次）\n *      onFirstRender       首次渲染后（只执行1次）\n *      onBeforeRender      渲染前\n *      onRender            渲染后\n *      onCompile           编译后\n *      onBeforeMount       挂载到document前\n *      onMount             挂载到document后\n *      onBeforeUnMount     从document脱离前\n *      onUnmount           从document脱离后\n *      onBeforeUpdate      更新到document前\n *      onUpdate            更新到document后\n */\nexport class Module {\n    /**\n     * 模块id(全局唯一)\n     */\n    public id: number;\n\n    /**\n     * 模型，代理过的data\n     */\n    public model:Model;\n\n    /**\n     * 子模块类集合，模板中引用的模块类需要声明\n     * 如果类已经通过registModule注册过，这里不再需要定义，只需import即可\n     */\n    public modules: any;\n\n    /**\n     * 父模块通过dom节点传递的属性\n     */\n    public props:any;\n\n    /**\n     * 不渲染的属性（这些属性用于生产模板，不作为属性渲染到模块根节点）\n     */\n    private excludedProps:string[];\n\n    /**\n     * 父模块 id\n     */\n    public parentId: number;\n\n    /**\n     * 子模块id数组\n     */\n    public children: Array<number> = [];\n\n    /**\n     * 模块状态\n     */\n    public state: EModuleState;\n\n    /**\n     * 模型管理器\n     */\n    public modelManager:ModelManager;\n    \n    /**\n     * 对象管理器，用于管理虚拟dom节点、指令、表达式、事件对象及其运行时参数\n     */\n    public objectManager:ObjectManager;\n\n    /**\n     * dom 管理器，管理虚拟dom、渲染dom和html node\n     */\n    public domManager:DomManager;\n\n    /**\n     * 事件工厂\n     */\n    public eventFactory:EventFactory;\n\n    /**\n     * 来源dom，子模块对应dom\n     */\n    public srcDom:IRenderedDom;\n\n    /**\n     * 源element\n     */\n    public srcElement:Node;\n\n    /**\n     * 源节点传递的事件，需要追加到模块根节点上\n     */\n    public events:NEvent[];\n\n    /**\n     * 生成dom时的keyid，每次编译置0\n     */\n    private domKeyId:number;\n\n    /**\n     * 旧模板串\n     */\n    private oldTemplate:string;\n\n    /**\n     * 模板对应模块id，作为子模块时有效\n     */\n    public templateModuleId:number;\n\n    /**\n     * 构造器\n     */\n    constructor() {\n        this.id = Util.genId();\n        this.modelManager = new ModelManager(this);\n        this.domManager = new DomManager(this);\n        this.objectManager = new ObjectManager(this);\n        this.eventFactory = new EventFactory(this);\n        //加入模块工厂\n        ModuleFactory.add(this);\n    }\n\n    /**\n     * 初始化操作\n     */\n    public init(){\n        this.state = EModuleState.INIT;\n        //初始化model\n        this.model = new Model(this.data()||{} , this);\n        this.doModuleEvent('onInit');\n    }\n\n    /**\n     * 模板串方法，使用时重载\n     * @param props     props对象，在模板容器dom中进行配置，从父模块传入\n     * @returns         模板串\n     */\n    public template(props?:any):string{\n        return null;\n    }\n\n    /**\n     * 数据方法，使用时重载\n     * @returns     数据对象\n     */\n    public data():any{\n        return {};\n    }\n    \n    /**\n     * 模型渲染\n     */\n    public render(): boolean {\n        if(this.state === EModuleState.UNMOUNTED){\n            return;\n        }\n        //检测模板并编译\n        const templateStr = this.template(this.props);\n        const firstRender = this.oldTemplate===undefined;\n        //与旧模板不一样，需要重新编译\n        if(templateStr !== this.oldTemplate){\n            this.oldTemplate = templateStr;\n            this.compile();\n        }\n        //不存在domManager.vdomTree，不渲染\n        if(!this.domManager.vdomTree){\n            return;\n        }\n        //首次渲染\n        if(firstRender){\n            this.doModuleEvent('onBeforeFirstRender');    \n        }\n        //渲染前事件\n        this.doModuleEvent('onBeforeRender');\n        //保留旧树\n        const oldTree = this.domManager.renderedTree;\n        //渲染\n        this.domManager.renderedTree = Renderer.renderDom(this,this.domManager.vdomTree,this.model);\n        //每次渲染后事件\n        this.doModuleEvent('onRender');\n        //首次渲染\n        if(firstRender){\n            this.doModuleEvent('onFirstRender');    \n        }\n        //渲染树为空，从html卸载\n        if(!this.domManager.renderedTree){\n            this.unmount();\n            return;\n        }\n        //已经挂载\n        if(this.state === EModuleState.MOUNTED){\n            if(oldTree && this.model){\n                //新旧渲染树节点diff\n                const changeDoms = DiffTool.compare(this.domManager.renderedTree,oldTree);\n                //执行更改\n                if(changeDoms.length>0){\n                    //html节点更新前事件\n                    this.doModuleEvent('onBeforeUpdate');\n                    Renderer.handleChangedDoms(this,changeDoms);\n                    //html节点更新后事件\n                    this.doModuleEvent('onUpdate');\n                }\n            }\n        }else { //未挂载\n            this.mount();\n        }\n    }\n\n    /**\n     * 添加子模块\n     * @param module    模块id或模块\n     */\n    public addChild(module: number|Module) {\n        if(typeof module === 'number'){\n            module = ModuleFactory.get(module);\n        }\n        if(module){\n            if (!this.children.includes(module.id)) {\n                this.children.push(module.id);\n                module.parentId = this.id;\n            }\n        }\n    }\n\n    /**\n     * 移除子模块\n     * @param module    子模块\n     */\n    public removeChild(module: Module) {\n        let ind=this.children.indexOf(module.id);\n        if (ind !== -1) {\n            module.unmount();\n            this.children.splice(ind,1);\n        }\n    }\n\n    /**\n     * 激活模块(准备渲染)\n     */\n    public active() {\n        //如果为unmounted，则设置为准备好状态\n        if(this.state === EModuleState.UNMOUNTED){\n            this.state = EModuleState.INIT;\n        }\n        Renderer.add(this);\n    }\n\n    /**\n     * 挂载到document\n     */\n    public mount(){\n        //执行挂载前事件\n        this.doModuleEvent('onBeforeMount');\n        //渲染到fragment\n        let rootEl = new DocumentFragment();\n        const el = Renderer.renderToHtml(this,this.domManager.renderedTree,rootEl,true);\n        //主模块，直接添加到根模块\n        if(this === ModuleFactory.getMain()){\n            Renderer.getRootEl().append(el);\n        }else if(this.srcDom){ //挂载到父模块中\n            const pm = this.getParent();\n            if(!pm){\n                return;\n            }\n            //替换占位符\n            this.srcElement = pm.getElement(this.srcDom.key);\n            if (this.srcElement) {\n                this.srcElement.parentElement.replaceChild(el, this.srcElement);\n            }\n            //保存对应key\n            pm.saveElement(this.srcDom.key, el);\n        }\n        //执行挂载后事件\n        this.doModuleEvent('onMount');\n        this.state = EModuleState.MOUNTED;\n    }\n\n    /**\n     * 解挂，从document移除\n     */\n    public unmount(){\n        // 主模块或状态为unmounted的模块不用处理\n        if (this.state === EModuleState.UNMOUNTED || ModuleFactory.getMain() === this) {\n            return;\n        }\n        //从render列表移除\n        Renderer.remove(this.id);\n        //清空event factory\n        this.eventFactory.clear();\n        //执行卸载前事件\n        this.doModuleEvent('onBeforeUnMount');\n        //module根与源el切换\n        const el = this.getElement(1);\n        if (el) {\n            if (this.srcDom) {\n                const pm = this.getParent();\n                if (pm) {\n                    //设置模块占位符\n                    if (el.parentElement) {\n                        el.parentElement.replaceChild(this.srcElement, el);\n                    }\n                    pm.saveElement(this.srcDom.key, this.srcElement);    \n                }\n            }    \n        }\n        this.domManager.reset();\n        //设置状态\n        this.state = EModuleState.UNMOUNTED;\n        //子模块递归卸载\n        if (this.children) {\n            for (let id of this.children) {\n                let m = ModuleFactory.get(id);\n                if (m) {\n                    m.unmount();\n                }\n            }\n        }\n        //执行卸载后事件\n        this.doModuleEvent('onUnMount');\n    }\n    \n    /**\n     * 获取父模块\n     * @returns     父模块   \n     */\n    public getParent(): Module {\n        if (this.parentId) {\n            return ModuleFactory.get(this.parentId);\n        }\n    }\n\n    /**\n     * 执行模块事件\n     * @param eventName \t事件名\n     * @returns             执行结果，各事件返回值如下：\n     *                          onBeforeRender：如果为true，表示不进行渲染\n     */\n    private doModuleEvent(eventName: string):boolean{\n        let foo = this[eventName];\n        if(foo && typeof foo==='function'){\n            return foo.apply(this,[this.model]);\n        }\n    }\n\n    /**\n     * 获取模块方法\n     * @param name  方法名\n     * @returns     方法\n     */\n    public getMethod(name: string): Function {\n        return this[name];\n    }\n\n    /**\n     * 设置props\n     * @param props     属性值\n     * @param dom       子模块对应渲染后节点\n     */\n    public setProps(props:any,dom:IRenderedDom){\n        let dataObj = props.$data;\n        delete props.$data;\n        //props数据复制到模块model\n        if(dataObj){\n            for(let d of Object.keys(dataObj)){\n                this.model[d] = dataObj[d];\n            }\n        }\n        //保留src dom\n        this.srcDom = dom;\n        //如果不存在旧的props，则change为true，否则初始化为false\n        let change:boolean = false;\n        if(!this.props){\n            change = true;\n        }else{\n            for(let k of Object.keys(props)){\n                // object 默认改变\n                if(props[k] !== this.props[k]){\n                    change = true;\n                }\n            }\n        }\n        //保存事件数组\n        this.events = dom.vdom.events;\n        //props发生改变或unmounted，激活模块\n        if(change || this.state === EModuleState.UNMOUNTED){\n            this.active();\n        }\n        //保存props\n        this.props = props;\n    }\n\n    /**\n     * 编译\n     */\n    public compile(){\n        //注册子模块\n        if(this.modules && Array.isArray(this.modules)){\n            for (let cls of this.modules) {\n                ModuleFactory.addClass(cls);\n            }\n            delete this.modules;\n        }\n        if(!this.oldTemplate){\n            return;\n        }\n        //重置初始domkey\n        this.domKeyId = 0;\n        //清空孩子节点\n        this.children = [];\n        //清理css url\n        CssManager.clearModuleRules(this);\n        //清除dom参数\n        this.objectManager.clearAllDomParams();\n        //编译\n        this.domManager.vdomTree = new Compiler(this).compile(this.oldTemplate);\n        if(!this.domManager.vdomTree){\n            return;\n        }\n        \n        //添加从源dom传递的事件\n        if(this.events){\n            for(let ev of this.events){\n                this.domManager.vdomTree.addEvent(ev);\n            }\n        }\n        //增加编译后事件\n        this.doModuleEvent('onCompile');\n    }\n\n    /**\n     * 设置不渲染到根dom的属性集合\n     * @param props     待移除的属性名属组\n     */\n    public setExcludeProps(props:string[]){\n        this.excludedProps = props;\n    }\n\n    /**\n     * 处理根节点属性\n     * @param src       编译节点\n     * @param dst       dom节点\n     */\n    public handleRootProps(src,dst){\n        //已合并属性集合\n        const added = {};\n        if(src.props && src.props.size>0){\n            for(let k of src.props){\n                let value;\n                if(this.excludedProps && this.excludedProps.includes(k[0])){\n                    continue;\n                }\n                if(k[1] instanceof Expression){\n                    value = k[1].val(this,dst.model);\n                }else{\n                    value = k[1];\n                }\n                // 合并属性\n                if(this.props && this.props.hasOwnProperty(k[0])){\n                    let v = this.props[k[0]];\n                    if(v){\n                        if('style' === k[0]){\n                            v = v.trim();\n                            if(!value){\n                                value = v;\n                            }else{\n                                value = (value + ';' + v).replace(/;{2,}/g,';');\n                            }\n                        }else if('class' === k[0]){\n                            v = v.trim();\n                            if(!value){\n                                value = v;\n                            }else{\n                                value += ' ' + v;\n                            }\n                        }else{\n                            value = v;\n                        }\n                    }\n                    // 设置已处理标志\n                    added[k[0]] = true;\n                }\n                dst.props[k[0]] = value;\n            }\n        }\n        if(this.props){\n            //处理未添加的属性\n            for(let p of Object.keys(this.props)){\n                if(added[p] || this.excludedProps && this.excludedProps.includes(p)){\n                    continue;\n                }\n                dst.props[p] = this.props[p];\n            }\n        }\n    }\n\n    /**\n     * 获取html node\n     * @param key   dom key 或 props键值对\n     * @returns     html node\n     */\n    public getElement(key:any):Node{\n        return this.domManager.getElement(key);\n    }\n\n    /**\n     * save html node\n     * @param key   dom key\n     * @param node  html node\n     */\n    public saveElement(key:number|string,node:Node){\n        this.domManager.saveElement(key,node);\n    }\n\n    /**\n     * 获取模块类名对应的第一个子模块(如果设置deep，则深度优先)\n     * @param name          子模块类名或别名\n     * @param deep          是否深度获取\n     * @param attrs         属性集合\n     */\n    public getModule(name:string,deep?:boolean,attrs?:any):Module{\n        if(!this.children){\n            return;\n        }\n        const cls = ModuleFactory.getClass(name);\n        if(!cls){\n            return;\n        }\n        return find(this);\n        /**\n         * 查询\n         * @param mdl   模块\n         * @returns     符合条件的子模块\n         */\n        function find(mdl){\n            for(let id of mdl.children){\n                let m:Module = ModuleFactory.get(id);\n                if(m){\n                    if(m.constructor === cls){\n                        if(attrs){  //属性集合不为空\n                            //全匹配标识\n                            let matched:boolean = true;\n                            for(let k of Object.keys(attrs)){\n                                if(!m.props || m.props[k] !== attrs[k]){\n                                    matched = false;\n                                    break;\n                                }\n                            }\n                            if(matched){\n                                return m;\n                            }\n                        }else{\n                            return m;\n                        }\n                    }\n                    //递归查找\n                    if(deep){\n                        let r = find(m);\n                        if(r){\n                            return r;\n                        }\n                    }\n                }\n            }\n        }\n        \n    }\n\n    /**\n     * 获取模块类名对应的所有子模块\n     * @param className     子模块类名\n     * @param deep          深度查询\n     */\n     public getModules(className:string,deep?:boolean):Module[]{\n        if(!this.children){\n            return;\n        }\n        let arr = [];\n        find(this);\n        return arr;\n\n        /**\n         * 查询\n         * @param module \n         */\n        function find(module:Module){\n            if(!module.children){\n                return;\n            }\n            for(let id of module.children){\n                let m:Module = ModuleFactory.get(id);\n                if(m && m.constructor){\n                    if(m.constructor.name === className){\n                        arr.push(m);\n                    }\n                    if(deep){\n                        find(m);\n                    }\n                }\n            }   \n        }\n    }\n\n\n    /**\n     * 监听\n     * 如果第一个参数为属性名，则第二个参数为钩子函数，第三个参数为deep，默认model为根模型\n     * 否则按照以下说明\n     * @param model     模型或属性\n     * @param key       属性/属性数组，支持多级属性\n     * @param operate   钩子函数\n     * @param deep      是否深度监听\n     * @returns         可回收监听器，执行后取消监听\n     */\n    public watch(model:Model|string|string[],key:string|string[]|Function,operate?:Function|boolean,deep?:boolean){\n        if(model['__key']){\n            return this.modelManager.watch(model,<any>key,<Function>operate,deep);\n        }else{\n            return this.modelManager.watch(this.model,<any>model,<any>key,<boolean>operate);\n        }\n    }\n\n    /**\n     * 设置模型属性值\n     * 如果第一个参数为属性名，则第二个参数为属性值，默认model为根模型\n     * 否则按照以下说明\n     * @param model     模型\n     * @param key       子属性，可以分级，如 name.firstName\n     * @param value     属性值\n     */\n    public set(model:Model|string,key:any,value?:any){\n        if(model['__key']){\n            this.modelManager.set(model,key,value);\n        }else{\n            this.modelManager.set(this.model,<string>model,key);\n        }\n    }\n\n    /**\n     * 获取模型属性值\n     * 如果第一个参数为属性名，默认model为根模型\n     * 否则按照以下说明\n     * @param model     模型\n     * @param key       属性名，可以分级，如 name.firstName，如果为null，则返回自己\n     * @returns         属性值\n     */\n    public get(model:Model|string, key?:any):any {\n        if(model['__key']){\n            return this.modelManager.get(model,key);\n        }else{\n            return this.modelManager.get(this.model,<string>model);\n        }\n    }\n\n    /**\n     * 调用方法\n     * @param methodName    方法名\n     * @param pn            参数，最多10个参数\n     */\n    public invokeMethod(methodName:string,p1?,p2?,p3?,p4?,p5?,p6?,p7?,p8?,p9?,p10?){\n        if(typeof this[methodName] === 'function'){\n            return this[methodName].call(this,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);\n        }\n    }\n\n    /**\n     * 调用外部方法，当该模块作为子模块使用时，方法属于使用该模块的模板对应的module\n     * @param methodName    方法名\n     * @param pn            参数，最多10个参数\n     */\n    public invokeOuterMethod(methodName:string,p1?,p2?,p3?,p4?,p5?,p6?,p7?,p8?,p9?,p10?){\n        if(!this.templateModuleId){\n            return;\n        }\n        const m = ModuleFactory.get(this.templateModuleId);\n        if(!m){\n            return;\n        }\n        return m.invokeMethod(methodName,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10);\n    }\n\n    \n    /**\n     * 获取dom key id\n     * @returns     key id\n     */\n    public getDomKeyId():number{\n        return ++this.domKeyId;\n    }\n}","import { Module } from \"./module\";\n\n/**\n * 工厂基类\n */\nexport class NFactory {\n    /**\n     * 模块名\n     */\n    private moduleId:number;\n    /**\n     * 工厂item对象\n     */\n    private items:Map<number|string,any> = new Map();\n    \n    /**\n     * @param module 模块\n     */\n    constructor(module?:Module) {\n        if (module !== undefined) {\n            this.moduleId = module.id;\n        }\n    }\n\n    /**\n     * 添加到工厂\n     * @param name \titem name\n     * @param item\titem\n     */\n    public add(name:string|number, item:any) {\n        this.items.set(name,item);\n    }\n\n    /**\n     * 获得item\n     * @param name \titem name\n     * @returns     item\n     */\n    public get(name:string|number):any{\n        return this.items.get(name);\n    }\n\n    \n    /**\n     * 从容器移除\n     * @param name \titem name\n     */\n    public remove(name:string|number) {\n        this.items.delete(name);\n    }\n\n    /**\n     * 是否拥有该项\n     * @param name  item name\n     * @return      true/false\n     */\n    public has(name:string|number):boolean{\n        return this.items.has(name);\n    }\n}\n","import { Module } from \"./module\";\nimport { ModuleFactory } from \"./modulefactory\";\nimport { Route } from \"./route\";\nimport { EModuleState } from \"./types\";\nimport { Util } from \"./util\";\n\n/**\n * 路由管理类\n * @since \t1.0\n */\nexport class Router {\n    /**\n     * 根路由\n     */\n    private root:Route = new Route();\n\n    /**\n     * 基础路径，实际显示路径为 basePath+routePath\n     */\n    private basePath:string;\n    \n    /**\n     * 当前路径\n     */\n    public currentPath: string;\n\n    /**\n     * path等待链表\n     */\n    private waitList: Array<string> = [];\n\n    /**\n     * 默认路由进入事件方法\n     */\n    private onDefaultEnter: Function;\n    /**\n     * 默认路由离开事件\n     */\n    private onDefaultLeave: Function;\n\n    /**\n     * 启动方式 0:直接启动 1:popstate 启动\n     */\n    private startType: number;\n\n\n    /**\n     * 激活Dom map\n     * key: path\n     * value:{moduleId:dom所属模板模块id，model:对应model,field:激活字段名}\n     */\n    private activeModelMap: Map<string, any> = new Map();\n\n    /**\n     * 绑定到module的router指令对应的key，即router容器对应的key，格式为 \n     *  {\n     *      moduleId:{\n     *          mid:router所在模块id,\n     *          key:routerKey(路由key),\n     *          paths:active路径数组\n     *          wait:{mid:待渲染的模块id,path:route.path}\n     *      }\n     *      ,...\n     *  }\n     *  moduleId: router所属模块id（如果为slot且slot不是innerRender，则为模板对应模块id，否则为当前模块id）\n     */\n    private routerMap: Map<number, any> = new Map();\n    \n    /**\n     * 构造器\n     * @param basePath          路由基础路径，显示的完整路径为 basePath + route.path\n     * @param defaultEnter      默认进入时事件函数，传递参数： module,离开前路径\n     * @param defaultLeave      默认离开时事件函数，传递参数： module,进入时路径\n     */\n    constructor(basePath?:string,defaultEnter?:Function,defaultLeave?:Function){\n        this.basePath = basePath;\n        this.onDefaultEnter = defaultEnter;\n        this.onDefaultLeave = defaultLeave;\n        //添加popstate事件\n        window.addEventListener('popstate', e=>{\n            //根据state切换module\n            const state = history.state;\n            if (!state) {\n                return;\n            }\n            this.startType = 1;\n            this.go(state);\n        });\n    }\n\n    /**\n     * 把路径加入跳转列表(准备跳往该路由)\n     * @param path \t路径 \n     * @param type  启动路由类型，参考startType，默认0\n     */\n    public go(path: string) {\n        //相同路径不加入\n        if (path === this.currentPath) {\n            return;\n        }\n        //添加路径到等待列表，已存在，不加入\n        if (this.waitList.indexOf(path) === -1) {\n            this.waitList.push(path);\n        }\n        //延迟加载，避免同一个路径多次加入\n        setTimeout(() => {\n            this.load();\n        }, 0);\n    }\n\n    /**\n     * 启动加载\n     */\n    private load() {\n        //在加载，或无等待列表，则返回\n        if (this.waitList.length === 0) {\n            return;\n        }\n        //从等待队列拿路径加载\n        let path: string = this.waitList.shift();\n        this.start(path).then(() => {\n            //继续加载\n            this.load();\n        });\n    }\n\n    /**\n     * 切换路由\n     * @param path \t路径\n     */\n    private async start(path: string) {\n        let diff = this.compare(this.currentPath, path);\n        // 不存在上一级模块,则为主模块，否则为上一级模块\n        let parentModule: Module = diff[0] === null?ModuleFactory.getMain():await this.getModule(diff[0]);\n        //onleave事件，从末往前执行\n        for (let i = diff[1].length - 1; i >= 0; i--) {\n            const r = diff[1][i];\n            if (!r.module) {\n                continue;\n            }\n            const module: Module = await this.getModule(r);\n            if (Util.isFunction(this.onDefaultLeave)) {\n                this.onDefaultLeave(module,this.currentPath);\n            }\n            if (Util.isFunction(r.onLeave)) {\n                r.onLeave(module,path,this.currentPath);\n            }\n            //从父模块移除\n            const pm = module.getParent();\n            if(pm){\n                pm.removeChild(module);\n            }\n            // 取消挂载\n            module.unmount();\n        }\n        if (diff[2].length === 0) { //路由相同，参数不同\n            let route: Route = diff[0];\n            if (route !== null) {\n                const module: Module = await this.getModule(route);\n                // 模块处理\n                this.dependHandle(module, route, diff[3] ? diff[3].module : null);\n            }\n        } else { //路由不同\n            //加载模块\n            for (let ii = 0; ii < diff[2].length; ii++) {\n                const route: Route = diff[2][ii];\n                //路由不存在或路由没有模块（空路由）\n                if (!route || !route.module) {\n                    continue;\n                }\n                const module: Module = await this.getModule(route);\n                // 模块处理\n                this.dependHandle(module, route, parentModule);\n                //默认全局路由enter事件\n                if (Util.isFunction(this.onDefaultEnter)) {\n                    this.onDefaultEnter(module,path);\n                }\n                //当前路由进入事件\n                if (Util.isFunction(route.onEnter)) {\n                    route.onEnter(module,path);\n                }\n                parentModule = module;\n            }\n        }\n        //如果是history popstate，则不加入history\n        if (this.startType === 0) {\n            let path1:string = (this.basePath||'') + path;\n            //子路由，替换state\n            if (path.startsWith(this.currentPath)) {\n                history.replaceState(path1, '', path1);\n            } else { //路径push进history\n                history.pushState(path1, '', path1);\n            }\n        }\n        //修改currentPath\n        this.currentPath = path;\n        //设置start类型为正常start\n        this.startType = 0;\n    }\n\n    /**\n     * 获取module\n     * @param route 路由对象 \n     * @returns     路由对应模块\n     */\n    private async getModule(route: Route) {\n        let module = route.module;\n        //已经是模块实例\n        if (typeof module === 'object') {\n            return module;\n        }\n        //模块路径\n        if(typeof module === 'string'){\n            module = await ModuleFactory.load(module);\n        }\n        //模块类\n        if (typeof module === 'function') {\n            route.module = ModuleFactory.get(module);\n        }\n        return route.module;\n    }\n    /**\n     * 比较两个路径对应的路由链\n     * @param path1 \t第一个路径\n     * @param path2 \t第二个路径\n     * @returns \t\t数组 [父路由或不同参数的路由，需要销毁的路由数组，需要增加的路由数组，不同参数路由的父路由]\n     */\n    private compare(path1: string, path2: string): Array<any> {\n        // 获取路由id数组\n        let arr1: Array<Route> = null;\n        let arr2: Array<Route> = null;\n        if (path1) {\n            //采用克隆方式复制，避免被第二个路径返回的路由覆盖参数\n            arr1 = this.getRouteList(path1, true);\n        }\n        if (path2) {\n            arr2 = this.getRouteList(path2);\n        }\n        let len = 0;\n        if (arr1 !== null) {\n            len = arr1.length;\n        }\n\n        if (arr2 !== null) {\n            if (arr2.length < len) {\n                len = arr2.length;\n            }\n        } else {\n            len = 0;\n        }\n        //需要销毁的旧路由数组\n        let retArr1 = [];\n        //需要加入的新路由数组\n        let retArr2 = [];\n        let i = 0;\n        for (i = 0; i < len; i++) {\n            //找到不同路由开始位置\n            if (arr1[i].id === arr2[i].id) {\n                //比较参数\n                if (JSON.stringify(arr1[i].data) !== JSON.stringify(arr2[i].data)) {\n                    i++;\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        //旧路由改变数组\n        if (arr1 !== null) {\n            retArr1 = arr1.slice(i);\n        }\n        //新路由改变数组（相对于旧路由）\n        if (arr2 !== null) {\n            retArr2 = arr2.slice(i);\n        }\n        //上一级路由或参数不同的当前路由\n        let p1: Route = null;\n        //上二级路由或参数不同路由的上一级路由\n        let p2: Route = null;\n        if (arr2 && i > 0) {\n            // 可能存在空路由，需要向前遍历\n            for (let j = i - 1; j >= 0; j--) {\n                if (!p1) {\n                    if (arr2[j].module) {\n                        p1 = arr2[j];\n                        continue;\n                    }\n                } else if (!p2) {\n                    if (arr2[j].module) {\n                        p2 = arr2[j];\n                        break;\n                    }\n                }\n            }\n        }\n        return [p1, retArr1, retArr2, p2];\n    }\n\n    /**\n     * 添加激活对象\n     * @param moduleId  模块id\n     * @param path      路由路径\n     * @param model     激活字段所在model\n     * @param field     字段名\n     */\n    public addActiveModel(moduleId:number,path: string, model: any, field: string) {\n        if (!model || !field) {\n            return;\n        }\n        //保存path对应active 模型信息\n        this.activeModelMap.set(path,{moduleId:moduleId,model:model,field:field});\n        //保存path到routerMap\n        if(this.routerMap.has(moduleId)){\n            const o = this.routerMap.get(moduleId)\n            if(!o.paths){\n                o.paths = [path];\n            }else{\n                if(!o.paths.includes(path)){\n                    o.paths.push(path);\n                }\n            }\n        }else{\n            this.routerMap.set(moduleId,{paths:[path]});\n        }\n    }\n\n    /**\n     * 依赖模块相关处理\n     * @param module \t模块\n     * @param pm        依赖模块\n     * @param path \t\tview对应的route路径\n     */\n    private dependHandle(module: Module, route: Route, pm: Module) {\n        //设置参数\n        let o = {\n            path: route.path\n        };\n        if (!Util.isEmpty(route.data)) {\n            o['data'] = route.data;\n        }\n        module.model['$route'] = o;\n        if(pm){\n            const mobj = this.routerMap.get(pm.id);\n            //尚未渲染，添加到等待渲染对象\n            if(!mobj){\n                this.routerMap.set(pm.id,{wait:{mid:module.id,path:route.path}});\n                // this.waitedRenderMap.set(pm.id,);\n            }else{\n                //得到router实际所在module\n                pm = ModuleFactory.get(mobj.mid);\n                module.srcDom = mobj.dom.children[0];\n                pm.addChild(module);\n                //激活\n                module.active();\n                this.setDomActive(route.fullPath);\n            }\n        }\n    }\n\n    /**\n     * 设置路由元素激活属性\n     * @param module    模块 \n     * @param path      路径\n     * @returns \n     */\n    private setDomActive(path: string) {\n        if(!this.activeModelMap.has(path)){\n            return;\n        }\n        const obj = this.activeModelMap.get(path);\n        if(!this.routerMap.has(obj.moduleId)){\n            return;\n        }\n        //获取模块 active path数组\n        const arr = this.routerMap.get(obj.moduleId).paths;\n        if(!arr){\n            return;\n        }\n        //当前路径对应model置true\n        obj.model[obj.field] = true;\n        //同模块下的其他路径对应model置false\n        for(let p of arr){\n            if(p !== path && this.activeModelMap.has(p)){\n                let o = this.activeModelMap.get(p);\n                o.model[o.field] = false;\n            }\n        }\n    }\n    \n    /**\n     * 获取路由数组\n     * @param path \t要解析的路径\n     * @param clone 是否clone，如果为false，则返回路由树的路由对象，否则返回克隆对象\n     * @returns     路由对象数组\n     */\n    private getRouteList(path: string, clone?: boolean): Array<Route> {\n        if (!this.root) {\n            return [];\n        }\n        let pathArr: string[] = path.split('/');\n        let node: Route = this.root;\n        let paramIndex: number = 0;      //参数索引\n        let retArr: Array<Route> = [];\n        let fullPath: string = '';       //完整路径\n        let preNode: Route = this.root;  //前一个节点\n        for (let i = 0; i < pathArr.length; i++) {\n            let v: string = pathArr[i].trim();\n            if (v === '') {\n                continue;\n            }\n            let find: boolean = false;\n            for (let j = 0; j < node.children.length; j++) {\n                if (node.children[j].path === v) {\n                    //设置完整路径\n                    if (preNode !== this.root) {\n                        preNode.fullPath = fullPath;\n                        preNode.data = node.data;\n                        retArr.push(preNode);\n                    }\n\n                    //设置新的查找节点\n                    node = clone ? node.children[j].clone() : node.children[j];\n                    //参数清空\n                    node.data = {};\n                    preNode = node;\n                    find = true;\n                    //参数索引置0\n                    paramIndex = 0;\n                    break;\n                }\n            }\n            //路径叠加\n            fullPath += '/' + v;\n            //不是孩子节点,作为参数\n            if (!find) {\n                if (paramIndex < node.params.length) { //超出参数长度的废弃\n                    node.data[node.params[paramIndex++]] = v;\n                }\n            }\n        }\n        //最后一个节点\n        if (node !== this.root) {\n            node.fullPath = fullPath;\n            retArr.push(node);\n        }\n        return retArr;\n    }\n\n    /**\n     * 获取根路由\n     * @returns     根路由对象\n     */\n    public getRoot():Route{\n        return this.root;\n    }\n\n    /**\n     * 登记路由容器到管理器中\n     * @param moduleId      模块id\n     * @param module        路由实际所在模块（当使用slot时，与moduleId对应模块不同）\n     * @param key           路由容器key\n     */\n    public registRouter(moduleId:number,module:Module,dom){\n        let obj;\n        if(!this.routerMap.has(moduleId)){\n            obj = {mid:module.id,dom:dom}\n            this.routerMap.set(moduleId,obj);\n        }else{\n            obj = this.routerMap.get(moduleId);\n            obj.mid = module.id;\n            obj.dom = dom;\n        }\n        \n        if(obj.wait){\n            const m = <Module>ModuleFactory.get(obj.wait.mid);\n            m.srcDom = dom.children[0];\n            module.addChild(m);\n            //激活\n            m.active();\n            //处理带active属性的dom\n            this.setDomActive(obj.path);\n            //执行后删除\n            delete obj.wait;\n        }\n    }\n\n    /**\n     * 尝试激活路径\n     * @param path  待激活的路径\n     */\n    public activePath(path:string){\n        // 如果当前路径为空或待激活路径是当前路径的子路径\n        if(!this.currentPath || path.startsWith(this.currentPath)){\n            this.go(path);\n        }\n    }\n}\n"],"names":["DefineElementManager","static","clazz","alias","Array","isArray","c","this","elements","set","name","toUpperCase","tagName","get","has","Map","DirectiveType","constructor","handle","prio","DirectiveManager","directiveTypes","delete","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","NodomMessage_en","TipWords","application","system","module","moduleClass","model","directive","directiveType","expression","event","method","filter","filterType","data","dataItem","route","routeView","plugin","resource","root","element","ErrorMsgs","unknown","uninit","paramException","invoke","invoke1","invoke2","invoke3","exist","exist1","notexist","notexist1","notupd","notremove","notremove1","namedinvalid","initial","jsonparse","timeout","config","config1","itemnotempty","itemincorrect","needEndTag","needStartTag","tagError","wrongTemplate","wrongExpression","WeekDays","NodomMessage_zh","ModuleFactory","item","modules","size","mainModule","id","addClass","mdl","tp","toLowerCase","classes","aliasMap","Reflect","construct","init","clazzName","modulePath","m","import","k","Object","keys","Expression","exprStr","Util","genId","trim","funStr","compile","execFunc","Function","reg","r","retS","index","exec","s","substring","lch","length","handleFunc","startsWith","isKeyWord","s1","lastIndex","str","ind1","replace","lastIndexOf","ind2","indexOf","fn1","val","v","call","console","error","NError","message","CssManager","dom","props","cls","cssPreName","parent","addRules","textContent","undefined","cssText","scopeName","sheet","document","createElement","head","appendChild","styleSheets","clearModuleRules","regImp","re","startIndex","beginNum","test","handleImport","txt","insertRule","cssRules","handleStyle","arr","objectManager","push","ind","css","importMap","importIndex","rules","i","selectorText","deleteRule","Renderer","rootEl","currentModule","waitList","includes","moduleId","splice","render","shift","src","key","key1","staticNum","dst","vdom","isSvg","currentRootDom","mdlDir","getDirective","handleProps","handleStyleDom","assets","p","handleDirectives","events","hasDirective","eventFactory","removeAllEvents","evt","addEvent","handleExpr","children","renderDom","expressions","expr","v1","directives","d","type","handleRootProps","el","getElement","renderToHtml","attrs","attributes","setAttribute","a","removeAttribute","parentEl","isRenderChild","newEl","newText","genSub","pEl","forEach","el1","createElementNS","saveElement","unbindAll","bind","handleStyleTextDom","node","createTextNode","changeDoms","repArr","addArr","moveArr","updateToHtml","n1","parentElement","removeChild","domManager","freeNode","n2","replaceChild","sort","b","opMap","childNodes","insertBefore","emptyDom","RequestManager","time","Date","now","requestMap","url","obj","rejectReqTick","compare","params","rand","$rand","Math","random","async","req","XMLHttpRequest","withCredentials","onload","status","responseText","JSON","parse","ontimeout","onerror","pa","isObject","ar","join","FormData","fd","append","open","user","pwd","header","getOwnProps","setRequestHeader","send","catch","NodomMessage","Route","isEmpty","path","o","addChild","routes","child","pathArr","split","param","paramIndex","prePath","j","clone","getOwnPropertyNames","Scheduler","tasks","isFunction","func","thiser","scheduleTick","dispatch","window","requestAnimationFrame","start","setTimeout","foo","Nodom","selector","setRootEl","querySelector","body","addTask","active","lang","getRoot","handler","priority","addType","request","Error","errorName","p1","p2","p3","p4","super","msg","arguments","p5","args","RegExp","generatedId","keyWordMap","srcObj","expKey","extra","me","map","WeakMap","prop","getCloneObj","isMap","co","cmp","o1","o2","keys1","keys2","timeStamp","format","Number","date","isNaN","getDay","getMonth","getDate","getHours","getMinutes","getSeconds","S","getMilliseconds","getFullYear","deep","setNodeKey","initKeyMap","Directive","templateMid","getType","templateModuleId","disabled","NEvent","eventName","eventStr","parseEvent","touchOrNot","evtStr","delg","nopopo","once","capture","ontouchend","setParam","setEventParam","getParam","getEventParam","removeParam","removeEventParam","clearParam","clearEventParam","VirtualDom","tag","getDomKeyId","removeDirectives","removeDirective","findIndex","addDirective","find","sortDirective","typeName","add","remove","addProp","removedClassMap","removeClass","getProp","setStaticOnce","getClassString","values","clsArr","pv","addStyle","style","removedStyleMap","sa1","removeStyle","styleStr","getStyleString","sa","hasProp","propName","isExpr","setProp","clear","pName","pValue","delProp","setAsset","assetName","delAsset","setDomParam","getDomParam","removeDomParam","voidTagMap","Set","Compiler","elementStr","template","compileTemplate","domArr","forceClose","genKey","srcStr","compileEndTag","compileStartTag","compileText","match","textArr","current","trimStart","compileAttributes","isVoidTab","handleCloseTag","findLastIndex","matchExp","isExprText","preHandleText","text","div","innerHTML","postHandleNode","hasClass","handleSlot","slotCt","isSelfClose","pop","DiffTool","changeArr","addChange","isChanged","addObj","newStartIdx","newEndIdx","oldStartIdx","oldEndIdx","newStartNode","newEndNode","oldStartNode","oldEndNode","ch","hasOwnProperty","ii","compareChildren","dom1","loc","loc1","DefineElement","EventManager","evts","ev","dependEvent","handleObj","extendEventMap","EventFactory","eventMap","addedEvents","addToArr","cfg","bindMap","own","getEvent","removeEvent","addEventListener","unbind","eobj","removeEventListener","hasEvent","currentTarget","getRenderedDom","doOwn","srcDom","invokeMethod","stopPropagation","doDelg","elArr","composedPath","evo","NCache","cacheData","subscribeMap","invokeSubscribe","subscribe","GlobalCache","cache","Model","__source","proxy","Proxy","receiver","value1","source","__module","modelManager","bindModel","setModelName","ov","update","getModelKey","res","getModel","deleteProperty","oldValue","ModelManager","dataMap","nameMap","getModelName","__key","mids","newValue","handleWatcher","watchMap","watcher","f","hasDeepWatch","__parent","pm","__name","watch","operate","watchOne","ObjectManager","clearDomParams","clearAllDomParams","EModuleState","DomManager","getOriginDom","vdomTree","d1","renderedTree","clearElementMap","elementMap","unmount","reset","MODULE","FOR","cond","IF","RECUR","ELSE","ELSEIF","ENDIF","SLOT","createDirective","mid","getCurrentModule","$data","setProps","rows","idxName","node1","showParam","rendered","regResult","display","origin","dataValue","yv","field","checked","temp","acName","router","addActiveModel","activePath","evObj","go","registRouter","slotName","check","needBind","regist","touchstart","evtObj","tch","touches","sx","pageX","sy","pageY","t","touchmove","pos","dx","dy","abs","move","touchend","dt","oldTime","speedLoc","x","y","oldLoc","nt","mv","sqrt","v0","sname","click","firstClick","Module","state","INIT","doModuleEvent","UNMOUNTED","templateStr","firstRender","oldTemplate","oldTree","MOUNTED","handleChangedDoms","mount","parentId","DocumentFragment","getMain","getRootEl","getParent","srcElement","getMethod","dataObj","change","domKeyId","setExcludeProps","excludedProps","added","getModule","getClass","matched","getModules","className","methodName","p6","p7","p8","p9","p10","invokeOuterMethod","NFactory","items","Router","basePath","defaultEnter","defaultLeave","onDefaultEnter","onDefaultLeave","history","startType","currentPath","load","diff","parentModule","onLeave","dependHandle","onEnter","path1","replaceState","pushState","path2","arr1","arr2","getRouteList","len","retArr1","retArr2","stringify","slice","activeModelMap","routerMap","paths","mobj","setDomActive","fullPath","wait","retArr","preNode","app"],"mappings":"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"}